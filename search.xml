<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代理与加速</title>
    <url>/2021/02/22/%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<h2 id="github加速与浏览器扩展"><a href="#github加速与浏览器扩展" class="headerlink" title="github加速与浏览器扩展"></a>github加速与浏览器扩展</h2><p>github有时下载较慢，可以安装一个chrome插件，chrome插件可以打开edge浏览器添加到edge</p>
<p><a href="https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/mfnkflidjnladnkldfonnaicljppahpg">GitHub加速</a> 提供repo的镜像加速地址，不提供release和raw的，<strong>不要设置该扩展</strong>，安装即有下图</p>
<p>效果</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210219134621.png" alt="image-20210219134621700"></p>
<p><a href="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd">Enhanced GitHub</a> 提供单个文件的下载链接和复制按钮</p>
<p><a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc">Octotree - GitHub code tree</a> 提供repo的目录树</p>
<h2 id="github徽章生成"><a href="#github徽章生成" class="headerlink" title="github徽章生成"></a>github徽章生成</h2><p>通过这个网站<a href="https://shields.io/">https://shields.io/</a></p>
<h2 id="一个加速github的油猴脚本"><a href="#一个加速github的油猴脚本" class="headerlink" title="一个加速github的油猴脚本"></a>一个加速github的油猴脚本</h2><p><a href="https://zhuanlan.zhihu.com/p/262905603">成功解决 Github 下载速度慢的问题！ - 知乎 (zhihu.com)</a></p>
<p>作者github：<a href="https://github.com/XIU2/UserScript">XIU2/UserScript: 🔨 自用的一些乱七八糟 油猴脚本 (github.com)</a></p>
<p>还开源了一些其他脚本</p>
<p>油猴脚本仓库</p>
<p><a href="https://greasyfork.org/zh-CN">Greasy Fork - 安全、实用的用户脚本大全</a></p>
<h2 id="佛跳墙vpn官网"><a href="#佛跳墙vpn官网" class="headerlink" title="佛跳墙vpn官网"></a>佛跳墙vpn官网</h2><p><a href="https://github.com/getfotiaoqiang/download">https://github.com/getfotiaoqiang/download</a></p>
<p><a href="https://fotiaoqiang.io/">https://fotiaoqiang.io</a></p>
<p>目前使用效果是游客也可以免费使用，且十分稳定</p>
<h2 id="js在线代理-临时上网"><a href="#js在线代理-临时上网" class="headerlink" title="js在线代理(临时上网)"></a>js在线代理(临时上网)</h2><p><strong><a href="https://github.com/EtherDream/jsproxy">jsprox</a></strong></p>
<p>使用里面的cf-worker可以暂时上外网，推特等需要登录的网站不支持，google会提示检测到机器人，youtube等不需要登录的网站可以访问</p>
<h2 id="wsl的ubuntu源替换为清华源"><a href="#wsl的ubuntu源替换为清华源" class="headerlink" title="wsl的ubuntu源替换为清华源"></a>wsl的ubuntu源替换为清华源</h2><p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210219135312.png" alt="image-20210219135312111"></p>
<p>点击<code>？</code>可以看到替换方式</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210219135427.png" alt="image-20210219135427366"></p>
<p>阿里的Ubuntu替换源教程都没有写好</p>
<p><a href="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.3e221b11uZr8As">阿里ubuntu</a></p>
<h2 id="终端走代理"><a href="#终端走代理" class="headerlink" title="终端走代理"></a>终端走代理</h2><p>在CLI里运行git clone命令是没有走代理的，需要进行配置，待续….</p>
<p>使用重复密码可能导致泄漏</p>
<p>可以使用密码随机生成</p>
<p><a href="https://1password.com/zh-cn/password-generator/">https://1password.com/zh-cn/password-generator/</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/error%20MSB8036%20%E6%89%BE%E4%B8%8D%E5%88%B0%20Windows%20SDK%20%E7%89%88%E6%9C%AC%2010/</url>
    <content><![CDATA[<p> <code>error MSB8036: 找不到 Windows SDK 版本 10.0.18362.0。请安装所需版本的 Windows SDK</code></p>
<p><code>error MSB8036 The Windows SDK version 10.0.18362.0 was not found</code></p>
<h2 id="错误调查"><a href="#错误调查" class="headerlink" title="错误调查"></a>错误调查</h2><p>我在E盘上安装了vs2019 community，并安装了WindowsSdk version <code>10.0.17763.0和10.0.18362.0</code>，创建控制台工程后遇到了上面的错误，而且还发现了其他问题。**<del>既然已经安装了10.0.18362.0，就不应该出现找不到信息</del>**</p>
<p><strong>我的win10版本是1909（18363.1379</strong>）</p>
<p>下面这些问题也是这个错误的表现</p>
<ol>
<li><p>vs2019创建控制台工程默认使用windowssdk最新版本</p>
</li>
<li><p>由于本机上安装的最新版本是10.0.18362.0，build时会有如下提示：</p>
<p>中文提示：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">错误	MSB8036	找不到 Windows SDK 版本 10.0.18362.0。请安装所需版本的 Windows SDK，或者在项目属性页中或通过右键单击解决方案并选择“重定解决方案目标”来更改 SDK 版本。	Project1	E:\Microsoft Visual Studio\2019\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.WindowsSDK.targets</span><br></pre></td></tr></table></figure>

<p>​    英文提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error	MSB8036	The Windows SDK version 10.0.18362.0 was not found. Install the required version of Windows SDK or change the SDK version in the project property pages or by right-clicking the solution and selecting &quot;Retarget solution&quot;.	ConsoleApplication10	E:\Microsoft Visual Studio\2019\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.WindowsSDK.targets	46	</span><br></pre></td></tr></table></figure>

<p>查看文件<code>Microsoft.Cpp.WindowsSDK.targets</code>会发现变量<code>WindowsSDKInstalled</code>为false会导致上面的错误信息.在project的属性页切换Windows SDK为10.0.17763.0，build成功</p>
<p>观察到<code>$(WindowsSdkDir)</code>的值在不同版本的sdk下，值不同</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210301232651.jpg"></p>
<p>切换为10.0.17763.0版本后，路径正确了</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210302011030.png" alt="image-20210302011030477"></p>
<p>3.安装boost<code>vcpkg install boost</code> ,当安装到包python3[core]:x86-windows -&gt; 3.9.2会调用msbuild,运行的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Command failed: msbuild E:&#x2F;Vcpkg&#x2F;vcpkg&#x2F;buildtrees&#x2F;python3&#x2F;x86-windows-rel&#x2F;v3.9.2-cc9ebdcfd9.clean&#x2F;PCbuild&#x2F;pcbuild.proj &#x2F;p:Configuration&#x3D;Release &#x2F;p:IncludeExtensions&#x3D;true &#x2F;p:IncludeExternals&#x3D;true &#x2F;p:IncludeCTypes&#x3D;true &#x2F;p:IncludeSSL&#x3D;true &#x2F;p:IncludeTkinter&#x3D;false &#x2F;p:IncludeTests&#x3D;false &#x2F;p:ForceImportBeforeCppTargets&#x3D;E:&#x2F;Vcpkg&#x2F;vcpkg&#x2F;buildtrees&#x2F;python3&#x2F;src&#x2F;v3.9.2-cc9ebdcfd9.clean&#x2F;PCbuild&#x2F;python_vcpkg.props &#x2F;p:IncludeUwp&#x3D;false &#x2F;p:_VcpkgPythonLinkage&#x3D;DynamicLibrary &#x2F;t:Rebuild &#x2F;p:Platform&#x3D;Win32 &#x2F;p:PlatformToolset&#x3D;v142 &#x2F;p:VCPkgLocalAppDataDisabled&#x3D;true &#x2F;p:UseIntelMKL&#x3D;No &#x2F;p:WindowsTargetPlatformVersion&#x3D;10.0.18362.0 &#x2F;p:VcpkgTriplet&#x3D;x86-windows &#x2F;p:VcpkgInstalledDir&#x3D;E:&#x2F;Vcpkg&#x2F;vcpkg&#x2F;installed &#x2F;p:VcpkgManifestInstall&#x3D;false &#x2F;m</span><br></pre></td></tr></table></figure>

<p>也会产生找不到windowssdk的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\Microsoft Visual Studio\2019\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.WindowsSDK.targets(46,5): error MSB8036: 找不到 Windows SDK 版本 10.0.18362.0。请安装所需版本的 Windows SDK，或者在项目属性页中或通过右键单击解决方案并选择“重定解决方案目标”来更改 SDK 版本。 </span><br></pre></td></tr></table></figure>

<p> msbuild使用proj文件构建，使用的sdk版本也是10.0.18362.0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msbuild pcbuild.proj  &#x2F;p:WindowsTargetPlatformVersion&#x3D;10.0.18362.0</span><br></pre></td></tr></table></figure>

<p>注意msbuild可以用/p:WindowsTargetPlatformVersion=10.0.18362.0形式制定sdk版本</p>
<p> 4.运行cmake,generator使用vs2019 2016,也会报错： error MSB8036: 找不到 Windows SDK 版本 10.0.18362.0，请安装所需版本的 Windows SDK</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210301233034.png" alt="image-20210301233034660"></p>
<h2 id="何处下载sdk"><a href="#何处下载sdk" class="headerlink" title="何处下载sdk"></a>何处下载sdk</h2><ol>
<li><p>从vs installer处单个组件下载安装</p>
</li>
<li><p>各个版本的Windows SDK 下载</p>
<p><a href="https://developer.microsoft.com/zh-cn/windows/downloads/sdk-archive">https://developer.microsoft.com/zh-cn/windows/downloads/sdk-archive</a></p>
<p>在此处并没有找到10.0.18362.0，10.0.18362.0是随着vs2019 community安装的</p>
<p>经安装，发现下面的10.0.18362.1就是10.0.18362.0，用vs installer卸载了10.0.18362.0，安装此处的10.0.18362.1，还是报相同错误</p>
<p>10.0.18362.1</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210302003639.png" alt="image-20210302003631864"></p>
<p>此处似乎有网络问题，需要先下载iso文件</p>
</li>
</ol>
<p>3.最新版本的Windows SDK下载</p>
<p>​    <a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk">https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk</a></p>
<h3 id="卸载sdk"><a href="#卸载sdk" class="headerlink" title="卸载sdk"></a>卸载sdk</h3><p>用windows卸载功能</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210302004838.png" alt="image-20210302004838307"></p>
<h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><p>注意到工程的proj文件里用<code>WindowsTargetPlatformVersion</code>控制sdk版本，在vs安装目录下查找WindowsTargetPlatformVersion发现2019\Common7\IDE\VC\VCWizards\2052\common.js里有个函数<br><code>StampWindowsTargetPlatformVersion</code>设置了它的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function StampWindowsTargetPlatformVersion(oProj)</span><br><span class="line">&#123;</span><br><span class="line">    var strLatestWindowsSDKVersion &#x3D; GetLatestWindowsSDKVersion(oProj);</span><br><span class="line">    if (strLatestWindowsSDKVersion)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;Stamp the latest Windows SDK version found in the disk - It is a global property, so enough to do it for any one config</span><br><span class="line">        var commonConfigRule &#x3D; oProj.Object.Configurations(1).Rules(&quot;ConfigurationGeneral&quot;);</span><br><span class="line">        commonConfigRule.SetPropertyValue(&quot;WindowsTargetPlatformVersion&quot;, strLatestWindowsSDKVersion);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改了sdk版本为某个特点值，还是不能解决上面的问题</p>
<p>用vs installer修复也没有解决</p>
<h2 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h2><p>我一直在vs installer里修复，或者尝试修改vs的2019\Common7\IDE\VC\VCWizards\2052\common.js，或者在网上搜索，寻找解决办法，都没有解决。</p>
<p>在我安装了一个新sdk，由于无法通过vs installer卸载（因为不是通过installer安装的），尝试用windows自带的卸载功能时，发现可以在此处修复sdk.使用修复后，这个错误消失了。</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210302011611.png" alt="image-20210302011611271"></p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://zhuanlan.zhihu.com/p/196453677">WindowsSdkDir从何处来？</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/GDB%E4%B8%8E%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ:"></a>FAQ:</h2><h3 id="linux或wsl下，进入GDB后如何执行外部命令？"><a href="#linux或wsl下，进入GDB后如何执行外部命令？" class="headerlink" title="linux或wsl下，进入GDB后如何执行外部命令？"></a>linux或wsl下，进入GDB后如何执行外部命令？</h3><p>输入shell,回到shell，再输入exit返回GDB</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210306221235.png" alt="image-20210306221228645"></p>
<h3 id="vscode使用gdb调试如何输入gdb命令？"><a href="#vscode使用gdb调试如何输入gdb命令？" class="headerlink" title="vscode使用gdb调试如何输入gdb命令？"></a>vscode使用gdb调试如何输入gdb命令？</h3><p>在DEBUG CONSOLE窗口使用<code>-exec gdb-comand</code>形式，如下图输入-exec c，程序继续执行，直到16行断点处停住</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210306230615.png" alt="image-20210306230615129"></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210306230712.png" alt="image-20210306230712018"></p>
<h3 id="win10下如何使用gdb？"><a href="#win10下如何使用gdb？" class="headerlink" title="win10下如何使用gdb？"></a>win10下如何使用gdb？</h3><p>安装Mingw64</p>
<h3 id="gdb开启调试？"><a href="#gdb开启调试？" class="headerlink" title="gdb开启调试？"></a>gdb开启调试？</h3><p>必须要有一个已经编译的程序，如win10下用g++编译的exe文件，且编译时加了-g参数，加入debug的符号信息</p>
<p>然后输入<code>gdb executable-file</code>进入gdb，在gdb提示符后输入<code>run</code>就启动了程序，会有如下的类似符号载入信息</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210306222310.png"></p>
<h3 id="退出gdb"><a href="#退出gdb" class="headerlink" title="退出gdb?"></a>退出gdb?</h3><p>输入quit或 q</p>
<h3 id="屏蔽进入gdb的开始信息"><a href="#屏蔽进入gdb的开始信息" class="headerlink" title="屏蔽进入gdb的开始信息"></a>屏蔽进入gdb的开始信息</h3><p>每次进gdb加上 <code>-silent</code> 参数</p>
<h3 id="gdb常用命令"><a href="#gdb常用命令" class="headerlink" title="gdb常用命令"></a>gdb常用命令</h3><p>break n 在某行断点</p>
<p>run 执行当前程序，会在第一个断点处停住</p>
<p>continue 程序在某处停住后，继续执行，直到遇到下一处断点</p>
<p>next 执行单步运行</p>
<p>print var-name  打印变量值</p>
<p>list 打印某行或某个函数</p>
<p>watch  观察某个变量</p>
<h2 id="GDB的三种调试方式"><a href="#GDB的三种调试方式" class="headerlink" title="GDB的三种调试方式"></a>GDB的三种调试方式</h2><ul>
<li>gdb filename</li>
<li>gdb attach pid</li>
<li>gdb filename corename</li>
</ul>
<p><a href="https://gitbook.cn/gitchat/column/5c0e149eedba1b683458fd5f/topic/5c0e1e9fedba1b6834591e85">https://gitbook.cn/gitchat/column/5c0e149eedba1b683458fd5f/topic/5c0e1e9fedba1b6834591e85</a></p>
<h2 id="gdb的调试原理"><a href="#gdb的调试原理" class="headerlink" title="gdb的调试原理"></a>gdb的调试原理</h2><p><a href="https://gitbook.cn/gitchat/column/5c0e149eedba1b683458fd5f/topic/5c0e1e47edba1b6834591e7f">https://gitbook.cn/gitchat/column/5c0e149eedba1b683458fd5f/topic/5c0e1e47edba1b6834591e7f</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/git%20%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>git在CLI访问远程仓库有两种url</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh形式：git@github.com:username&#x2F;reponame.git</span><br><span class="line">http形式：https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;reponame.git</span><br></pre></td></tr></table></figure>

<h2 id="ssh形式"><a href="#ssh形式" class="headerlink" title="ssh形式"></a>ssh形式</h2><p>通过ssh访问远程仓库如github，需要设置ssh key pair，设置后做git操作不需要输入github的用户名和密码。所以如果clone仓库时使用的是ssh url，在CLI访问github就是用的ssh密钥对来做身份认证</p>
<h2 id="http形式"><a href="#http形式" class="headerlink" title="http形式"></a>http形式</h2><p>http形式，每次在命令行做git操作，如git pull、git push都需要输入用户名和密码，为了简化这步操作，git有了<code>凭证存储</code>，即把用户名和密码存储在本地机器上。</p>
<p>参见 <a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8">Git工具-凭证存储</a> <a href="https://docs.github.com/en/github/using-git/which-remote-url-should-i-use">github-Which remote URL should I use</a></p>
<h3 id="git-for-windows安装时选择凭证管理"><a href="#git-for-windows安装时选择凭证管理" class="headerlink" title="git-for-windows安装时选择凭证管理"></a>git-for-windows安装时选择凭证管理</h3><p>git-for-windows安装时可以选择credential helper</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210316140350.png" alt="image-20210316140350683"></p>
<p>https用了ssl/tls来加密</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210316140200.png" alt="image-20210316140200110"></p>
<p>查看配置 credential.helper的值</p>
<p>下面的命令可以输入git所有的配置及所在文件</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">git config --list --show-origin</span><br></pre></td></tr></table></figure>

<p>用git config –list |grep credential.helper 查看所有的值</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210316141558.png" alt="image-20210316141558726"></p>
<p>下面这个错误是由于使用了网络代理</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210316131620.png" alt="image-20210316131620686"></p>
<h2 id="git-credential-fill"><a href="#git-credential-fill" class="headerlink" title="git credential fill"></a>git credential fill</h2><p>参见<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8</a></p>
<h2 id="凭证管理"><a href="#凭证管理" class="headerlink" title="凭证管理"></a>凭证管理</h2><h3 id="取消凭证管理"><a href="#取消凭证管理" class="headerlink" title="取消凭证管理"></a>取消凭证管理</h3><p>用以下命令可以取消三级配置的credential.helper，然后做git操作需要输入username和password</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --system --<span class="built_in">unset</span> credential.helper</span><br><span class="line">git config --global --<span class="built_in">unset</span> credential.helper</span><br><span class="line">git config --<span class="built_in">local</span> --<span class="built_in">unset</span> credential.helper</span><br></pre></td></tr></table></figure>

<p>恢复凭证管理需要用下面的命令，这只配置了两级，global级的会覆盖system级的值，</p>
<p>用git config –local credential.helper value 可以配置当前仓库的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --system credential.helper manager-core</span><br><span class="line">git config --global credential.helper manager</span><br></pre></td></tr></table></figure>

<h3 id="windows凭证管理"><a href="#windows凭证管理" class="headerlink" title="windows凭证管理"></a><em>windows凭证管理</em></h3><p>使用凭证管理后，这些凭证存在windows凭证管理器里，如果手动删除了凭证，使用git操作会提示需要登录</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210316160124.png" alt="image-20210316160124703"></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210316160001.png" alt="image-20210316160001011"></p>
<p>参考 <a href="https://www.cnblogs.com/volnet/p/git-credentials.html">https://www.cnblogs.com/volnet/p/git-credentials.html</a></p>
<p><a href="https://blog.csdn.net/lqlqlq007/article/details/79065095">https://blog.csdn.net/lqlqlq007/article/details/79065095</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/golang/</url>
    <content><![CDATA[<p>go 安装cheat 在windows下无法下载包，可以把代理更改下set GOPROXY=<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a></p>
<p>而cheat还是无法运行，见issue:<a href="https://github.com/cheat/cheat/issues/571">https://github.com/cheat/cheat/issues/571</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>官网</p>
<p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 看网站底部，似乎该站也是hexo搭建的</p>
<h1 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>查看这款主题支持哪些插件：查阅themes\next\_config.yml</p>
<h1 id="创建文章有两种方式"><a href="#创建文章有两种方式" class="headerlink" title="创建文章有两种方式"></a>创建文章有两种方式</h1><ol>
<li><p>hexo new post-name 创建的文章会生成标题</p>
</li>
<li><p>复制已有md文件到$Root\source\_posts目录下，导入的文章没有标题，需要在文章开头手动添加</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210316162126.png" alt="image-20210316162126707"></p>
</li>
</ol>
<p><a href="https://zhuanlan.zhihu.com/p/114195732">Mac_如何利用Hexo发布、迁移博文？</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>搜索功能</p>
<p><a href="https://blog.csdn.net/xinyflove/article/details/108791970">https://blog.csdn.net/xinyflove/article/details/108791970</a></p>
<p>开启标签主题等项</p>
<p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93644533">https://blog.csdn.net/mqdxiaoxiao/article/details/93644533</a></p>
<p>设置头像</p>
<p><a href="https://blog.csdn.net/qq_44304221/article/details/96758595">https://blog.csdn.net/qq_44304221/article/details/96758595</a></p>
<p>troubleshoot</p>
<h2 id="hexo-init初始化failed"><a href="#hexo-init初始化failed" class="headerlink" title="hexo init初始化failed"></a>hexo init初始化failed</h2><p>报错“fatal: unable to access ‘<a href="https://github.com/hexojs/hexo-starter.git/&#39;">https://github.com/hexojs/hexo-starter.git/&#39;</a>:  OpenSSL SSL_connect: Connection was reset in connection to github.com:443 ”</p>
<p><a href="https://www.cnblogs.com/sunjinggege/p/14430828.html">https://www.cnblogs.com/sunjinggege/p/14430828.html</a></p>
<p>不是git的配置原因，而是网络原因</p>
<h2 id="已有md文件放入-post目录下，文章无标题？"><a href="#已有md文件放入-post目录下，文章无标题？" class="headerlink" title="已有md文件放入_post目录下，文章无标题？"></a>已有md文件放入_post目录下，文章无标题？</h2><p><a href="https://sulin.me/2019/Z726F8.html">https://sulin.me/2019/Z726F8.html</a></p>
<p>已有md不带有Front-matter中的title</p>
<p><strong>md文档中如果插入yaml格式的文本块，hexo generate时会当做格式来解析，所以此处用图片插入代替</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210316162257.png" alt="image-20210316162257292"></p>
<h2 id="设置头像不显示？路径错误"><a href="#设置头像不显示？路径错误" class="headerlink" title="设置头像不显示？路径错误"></a>设置头像不显示？路径错误</h2><h2 id="hexo生成后，local可以看到，部署到github却不更新？"><a href="#hexo生成后，local可以看到，部署到github却不更新？" class="headerlink" title="hexo生成后，local可以看到，部署到github却不更新？"></a>hexo生成后，local可以看到，部署到github却不更新？</h2><p>如这种早起issue<a href="https://github.com/hexojs/hexo/issues/961">https://github.com/hexojs/hexo/issues/961</a></p>
<p>github pages从哪个分支发布：<a href="https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site">https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site</a></p>
<p><a href="https://blog.csdn.net/lu_xiuyuan/article/details/112056997">https://blog.csdn.net/lu_xiuyuan/article/details/112056997</a></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210223001150.png" alt="image-20210223001143608"></p>
<h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><h2 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h2><p>主题配置</p>
<p>经典主题Next<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p>
<p>Next效果展示：<a href="https://github.com/theme-next/awesome-next#live-preview">https://github.com/theme-next/awesome-next#live-preview</a></p>
<p><a href="https://tding.top/archives/42c38b10.html">Hexo-NexT (v7.0+) 主题配置</a></p>
<p><a href="http://www.guide2it.com/post/2019-03-04-03-configuration-for-next-theme-site/">Next主题配置详解</a></p>
<p>Hexo官网插件</p>
<p><a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p>
<p>gitte pages</p>
<p><a href="https://gitee.com/help/articles/4136#article-header0">https://gitee.com/help/articles/4136#article-header0</a></p>
<p>什么是gh-pages</p>
<h1 id="如何用Github的gh-pages分支展示自己的项目"><a href="#如何用Github的gh-pages分支展示自己的项目" class="headerlink" title="如何用Github的gh-pages分支展示自己的项目"></a><a href="https://www.cnblogs.com/MuYunyun/p/6082359.html">如何用Github的gh-pages分支展示自己的项目</a></h1><h1 id="持续集成服务-Travis-CI-教程"><a href="#持续集成服务-Travis-CI-教程" class="headerlink" title="持续集成服务 Travis CI 教程"></a>持续集成服务 Travis CI 教程</h1><p><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html</a></p>
<h1 id="next主题中设置mist主题内容居中"><a href="#next主题中设置mist主题内容居中" class="headerlink" title="next主题中设置mist主题内容居中"></a>next主题中设置mist主题内容居中</h1><p><a href="https://www.jianshu.com/p/19089f2b99c6">https://www.jianshu.com/p/19089f2b99c6</a></p>
<p>我的首页标题默认是居左的，修改后好了</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/nodejs/</url>
    <content><![CDATA[<p>nodejs</p>
<h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>安装模块到当前项目node_modules目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install module-name</span><br></pre></td></tr></table></figure>

<p>安装模块到本机的node.js 全局安装目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install module-name -g</span><br></pre></td></tr></table></figure>

<p>这个全局安装目录在哪儿呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config ls </span><br></pre></td></tr></table></figure>

<p>其中的变量prefix就定义了这个路径</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210314142034.png" alt="image-20210314142033995"></p>
<p>记录依赖信息</p>
<p>-save参数会将安装的模块信息写入dependencies文件package.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install module-name -save</span><br></pre></td></tr></table></figure>

<p>在当前项目rootdir下运行<code>npm install</code>的作用</p>
<p>By default, <code>npm install</code> will install all modules listed as dependencies in <a href="../configuring-npm/package-json.html"><code>package.json</code></a>.</p>
<h2 id="package-lock-json的作用"><a href="#package-lock-json的作用" class="headerlink" title="package-lock.json的作用"></a>package-lock.json的作用</h2><p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210314141031.png" alt="image-20210314141024177"></p>
<h2 id="npm包管理依赖机制的缺点"><a href="#npm包管理依赖机制的缺点" class="headerlink" title="npm包管理依赖机制的缺点"></a>npm包管理依赖机制的缺点</h2><p><a href="https://pnpm.js.org/zh/motivation/">https://pnpm.js.org/zh/motivation/</a></p>
<p>npm的包管理依赖原理</p>
<p><a href="https://zhuanlan.zhihu.com/p/352437367">https://zhuanlan.zhihu.com/p/352437367</a> pnpm</p>
<h2 id="Deno"><a href="#Deno" class="headerlink" title="Deno"></a>Deno</h2><p>to do</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/redis/</url>
    <content><![CDATA[<h1 id="redis源码安装过程"><a href="#redis源码安装过程" class="headerlink" title="redis源码安装过程"></a>redis源码安装过程</h1><p>安装环境：win101909 wsl2 ubuntu20.04</p>
<p>ubuntu发行版软件仓库提供的redis安装版本是稳定版，且一般落后于最新版的redis,所以不从软件仓库安装，而是下载源码编译安装</p>
<p>从发行版仓库安装命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo apt-get update</span><br><span class="line">$sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>

<p>运行redis</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server #服务端</span><br><span class="line">redis-client #客户端</span><br></pre></td></tr></table></figure>

<h2 id="clone工程"><a href="#clone工程" class="headerlink" title="clone工程"></a>clone工程</h2><p>使用了github的镜像加速方式获取的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com.cnpmjs.org&#x2F;redis&#x2F;redis.git</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308172600.png" alt="image-20210308172600746"></p>
<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>clone下来的当前分支为unstable分支，切换到最新的稳定分支，也就是latest release所在分支</p>
<p>92bde12是commit的sha1值缩写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout 92bde12</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308173200.png" alt="image-20210308173200693"></p>
<h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>执行make命令会编译生成redis的二进制可执行文件</p>
<p>BUILD_TLS=yess是为了支持TLS，这需要系统预先安装过OpenSSL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make BUILD_TLS&#x3D;yes</span><br></pre></td></tr></table></figure>

<p>如果没有OpenSSL，运行下面命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308173524.png" alt="image-20210308173524486"></p>
<p>安装过程还有许多可以自定义的参数，参见工程根目录下的README.md</p>
<h2 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h2><p>把redis的二进制文件安装到 /usr/local/bin,如果到其他目录，运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make PREFIX&#x3D;&#x2F;some&#x2F;other&#x2F;directory install</span><br></pre></td></tr></table></figure>

<p>没有这一步要运行redis,需要在命令行输入redis-server执行文件的绝对路径</p>
<h2 id="安装过程错误解决"><a href="#安装过程错误解决" class="headerlink" title="安装过程错误解决"></a>安装过程错误解决</h2><p>如下错误是缺少了OpenSSL的开发包，安装就行了</p>
<p><strong>错误</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308174314.png" alt="image-20210308174313906"></p>
<p><strong>安装libssl-dev</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install  libssl-dev</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308174621.png" alt="image-20210308174621245"></p>
<p><strong>重新运行make BUILD_TLS=yes还是报安装错误</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308174759.png" alt="image-20210308174759393"></p>
<p><strong>解决办法是运行清理</strong></p>
<p>注意 应该用**<code>make distclean  &amp;&amp; make BUILD_TLS=yes</code>**,make distclean是清理残存文件，make是编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make distclean  &amp;&amp; make</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308175034.png" alt="image-20210308175034009"></p>
<p><strong>清理完成后在执行make BUILD_TLS=yes</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308175202.png" alt="image-20210308175201924"></p>
<p><strong>运行测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make test</span><br></pre></td></tr></table></figure>

<p>下面是缺少tcl库，因为redis test的脚本是tcl文件</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308175615.png" alt="image-20210308175615525"></p>
<p><strong>安装tcl</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tcl</span><br></pre></td></tr></table></figure>

<p>然后再执行make test,可能出现下面的错误</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308175928.png" alt="image-20210308175928340"></p>
<p>搜索错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pending querybuf: check size of pending_querybuf after set a big value in tests&#x2F;unit&#x2F;pendingquerybuf.tcl</span><br></pre></td></tr></table></figure>

<p><strong>这个错误可以通过反复运行make test解决</strong>，参见<a href="https://github.com/redis/redis/issues/5463">issue5463</a> ,测试全部pass，也就安装完成了。</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308172355.png" alt="image-20210308172354716"></p>
<h1 id="运行redis-server"><a href="#运行redis-server" class="headerlink" title="运行redis server"></a>运行redis server</h1><p>cd到src目录下，运行 <code>./redis-server</code></p>
<p>从截图可以看到如下信息，pid是redis-server这个程序的进程id,默认运行在6379端口。</p>
<p>由于<code>./redis-server</code>这条命令没有设置为后台运行，所以不能关闭当前的shell会话，否则会终止redis server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Redis version&#x3D;6.2.1, bits&#x3D;64, commit&#x3D;92bde124, modified&#x3D;0, pid&#x3D;28642, just started</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308180345.png" alt="image-20210308180345322"></p>
<h1 id="运行redis-client"><a href="#运行redis-client" class="headerlink" title="运行redis client"></a>运行redis client</h1><p>cd到src目录，执行redis-cli，如图显示server运行在本机的6379端口</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308181026.png" alt="image-20210308181025940"></p>
<p>通过这个命令行的client可以访问数据库，如</p>
<p>set key-value, get key-value</p>
<h1 id="gdb调试正在运行的redis-server"><a href="#gdb调试正在运行的redis-server" class="headerlink" title="gdb调试正在运行的redis server"></a>gdb调试正在运行的redis server</h1><p>前面的sever pid为28642，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb attach pid</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308181529.png" alt="image-20210308181529197"></p>
<p>gdb下输入命令查看进程的线程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info threads</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308181651.png" alt="image-20210308181651309"></p>
<p><strong><code>通过redis-cli下输入命令下传递消息给server,来调试server</code></strong></p>
<h1 id="hiredis安装"><a href="#hiredis安装" class="headerlink" title="hiredis安装"></a>hiredis安装</h1><p>redis提供了多种语言的client和API，hiredis是c语言的API和client</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com.cnpmjs.org&#x2F;redis&#x2F;hiredis.git</span><br></pre></td></tr></table></figure>

<p>如下为安装过程截图</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308182021.png" alt="image-20210308182020870"></p>
<h1 id="wsl在vscode里使用hiredis-API"><a href="#wsl在vscode里使用hiredis-API" class="headerlink" title="wsl在vscode里使用hiredis API"></a>wsl在vscode里使用hiredis API</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;hiredis&#x2F;hiredis.h&quot;</span><br><span class="line">#include &lt;dirent.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    redisContext *context &#x3D; redisConnect(&quot;127.0.0.1&quot;, 6379);</span><br><span class="line"></span><br><span class="line">    redisCommand(context, &quot;SET number 1000&quot;);</span><br><span class="line"></span><br><span class="line">    redisFree(context);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用hiredis API写一段代码,并命名为con.cpp,运行 g++ con.cpp -lhiredis 编译，-lhiredis表示链接</p>
<p>hiredis的库文件</p>
<p>编译成功后出现执行出现如下错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error while loading shared libraries: libhiredis.so.1.0.1-dev: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308182534.png" alt="image-20210308182534069"></p>
<p>这是由于hiredis动态库libhiredis.so.1.0.1-dev 的默认安装路径为/usr/local/lib目录，系统找不到，在/etc/ld.so.conf文件里添加/usr/local/lib就行，执行<code>sudo /sbin/ldconfig</code>更新配置</p>
<p>编写代码向数据库写入键值对后，可以回到redis-cli下或者key-value</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210308181026.png" alt="image-20210308181025940"></p>
<p>ps:objdump -tT xxx.so可以查看库文件导出的函数接口</p>
<p>redis-cli常用命令</p>
<p>keys * 获取所有的键</p>
<p>redis默认数据为</p>
<p>redis地址</p>
<h1 id="redis日志"><a href="#redis日志" class="headerlink" title="redis日志"></a>redis日志</h1><p>我的redis安装目录为/home/hcf/redis，cd到这个目录下 cat redis.conf |grep logfile</p>
<p>logfile后面的path就是log路径，如果为空，redis的日志会写到标准输出</p>
<p>loglevel用来设置日志的等级</p>
<p>redis的配置文件为installdir/redis.conf</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.codetd.com/article/12466347">linux下hiredis安装、C接口编程</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/ssh/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我的本机上有多个ssh key，是我在不同的时期生成的，并添加到了github</p>
<ol>
<li>在我使用git操作访问github或hexo推送博客到github时,使用了是哪一个key?</li>
<li>在多个ssh keys下，每次使用git访问远程仓库时使用某个特定key?</li>
</ol>
<h2 id="ssh-exe"><a href="#ssh-exe" class="headerlink" title="ssh.exe"></a>ssh.exe</h2><p>ssh.exe可执行程序是命令行式的，运行形式为ssh [options] destination [command]</p>
<p>[]表示可以省略，而destination参数是必须的</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210315205322.png" alt="image-20210315205315358"></p>
<p>-i <em>identity_file</em> 可以显示指定用户的private key文件，如id_rsa</p>
<p>-F <em>configfile</em> 显示指定配置文件，系统级别（system-wised)的configfile为*/etc/ssh/ssh_config*，</p>
<p>用户级别的为 <em>~/.ssh/config</em></p>
<h2 id="ssh的作用"><a href="#ssh的作用" class="headerlink" title="ssh的作用"></a>ssh的作用</h2><p>ssh可以使用户远程登录主机，并且在主机执行各种操作（当然这需要用户具有相应的权限）</p>
<p>通过ssh访问github相当于是让本机拥有了访问权限，如果有其他人可以使用这台机器，也可以执行对仓库的读写权限（需要用户原来就具有这些权限），而密码原则上是只有知道密码的人才具有权限。</p>
<p>ssh对通信过程进行了加密，避免了网络攻击，如通信劫持，窃听，中间人攻击等</p>
<h2 id="加密known-hosts"><a href="#加密known-hosts" class="headerlink" title="加密known_hosts"></a>加密known_hosts</h2><p>如ssh访问github时，会把github的public key加入这个文件，要对文件内容加密，在/etc/ssh/ssh_config中加入HashKnownHosts yes</p>
<blockquote>
<p>Indicates that <a href="https://man.openbsd.org/ssh.1">ssh(1)</a> should hash host names and addresses when they are added to <em>~/.ssh/known_hosts</em>. These hashed names may be used normally by <a href="https://man.openbsd.org/ssh.1">ssh(1)</a> and <a href="https://man.openbsd.org/sshd.8">sshd(8)</a>, but they do not visually reveal identifying information if the file’s contents are disclosed. The default is <code>no</code>. Note that existing names and addresses in known hosts files will not be converted automatically, but may be manually hashed using <a href="https://man.openbsd.org/ssh-keygen.1">ssh-keygen(1)</a>.</p>
</blockquote>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="查看ssh-key的指纹"><a href="#查看ssh-key的指纹" class="headerlink" title="查看ssh key的指纹"></a>查看ssh key的指纹</h3><p><code>ssh-keygen -lf  public-key-file-name</code></p>
<p>对比github ssh key的指纹，就可以知道</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210315213521.png" alt="image-20210315213521277"></p>
<h2 id="调试ssh"><a href="#调试ssh" class="headerlink" title="调试ssh"></a>调试ssh</h2><p>ssh.exe使用时-v选项可以打印debug信息</p>
<blockquote>
<p>-v Verbose mode. Causes <code>ssh</code> to print debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple <code>-v</code> options increase the verbosity. The maximum is 3.</p>
</blockquote>
<p>–Verbose选项在许多命令行程序中都有用 </p>
<h2 id="配置文件的级别"><a href="#配置文件的级别" class="headerlink" title="配置文件的级别"></a>配置文件的级别</h2><p>许多linux命令行程序都会有配置文件，级别分为三级，例如git</p>
<blockquote>
<ul>
<li>/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。</li>
<li>~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。</li>
<li>当前仓库的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前仓库有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</li>
</ul>
</blockquote>
<p><code>system-wised</code> <code>per-user</code> <code>current dir-or-project</code></p>
<h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>encrypt     加密</p>
<p>authentication    认证 </p>
<p>certificate    证书</p>
<p>directive 指令 指示符</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/Vcpkg%20%E5%AE%89%E8%A3%85%E5%8C%85%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="vcpkg搜索包"><a href="#vcpkg搜索包" class="headerlink" title="vcpkg搜索包"></a>vcpkg搜索包</h2><p><code>vcpkg searc</code>不加package-name是列出所有支持的包，rg与grep功能相同，相对是个加强版，执行下面的命令可以找到libevent安装包的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg search | rg libevent</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210227005900.png" alt="image-20210227005900500"></p>
<h2 id="Vcpkg-安装包慢的解决办法"><a href="#Vcpkg-安装包慢的解决办法" class="headerlink" title="Vcpkg 安装包慢的解决办法"></a>Vcpkg 安装包慢的解决办法</h2><p>执行下面的命令，安装过程如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg install libevent </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210227004637.png" alt="image-20210227004637557"></p>
<p>从安装过程中可看出vcpkg先从github下载libevent的release,由于这个下载没有使用代理或者github的镜像，所以下载较慢。</p>
<p>可以手动下载这个包放到vcpkg\downloads目录下，复制以下链接到浏览器或者其他下载工具下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;libevent&#x2F;libevent&#x2F;archive&#x2F;release-2.1.12-stable.tar.gz</span><br></pre></td></tr></table></figure>

<p>注意不要从/libevent/libevent的release处下载，两个文件的hash值不同，我就遇到下面的报错</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210227011514.png" alt="image-20210227011513933"> </p>
<p>注意下载后的文件要更名为<code>libevent-libevent-release-2.1.12-stable.tar.gz</code></p>
<p>这是利用了vcpkg的缓存机制，类似scoop 的cache功能。</p>
<p>下图是手动下载安装包重新安装的过程</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210227012541.png" alt="image-20210227012540750"></p>
<p>安装过程：</p>
<p>下载安装包</p>
<p>解压出源码编译安装</p>
<p>reference：<a href="https://blog.csdn.net/cjmqas/article/details/79282847">https://blog.csdn.net/cjmqas/article/details/79282847</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/Vcpkg%E5%AE%89%E8%A3%85libevent/</url>
    <content><![CDATA[<h2 id="vcpkg搜索libevent"><a href="#vcpkg搜索libevent" class="headerlink" title="vcpkg搜索libevent"></a>vcpkg搜索libevent</h2><p><code>vcpkg search</code>不加package-name是列出所有支持的包，rg与grep功能相同，相对是个加强版，执行下面的命令可以找到libevent安装包的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg search | rg libevent</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210227005900.png" alt="image-20210227005900500"></p>
<h2 id="vcpkg安装包慢的解决办法"><a href="#vcpkg安装包慢的解决办法" class="headerlink" title="vcpkg安装包慢的解决办法"></a>vcpkg安装包慢的解决办法</h2><p>执行下面的命令，安装过程如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg install libevent </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210227004637.png" alt="image-20210227004637557"></p>
<p>从安装过程中可看出vcpkg先从github下载libevent的release,由于这个下载没有使用代理或者github的镜像，所以下载较慢。</p>
<p>可以手动下载这个包放到vcpkg\downloads目录下，复制以下链接到浏览器或者其他下载工具下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;libevent&#x2F;libevent&#x2F;archive&#x2F;release-2.1.12-stable.tar.gz</span><br></pre></td></tr></table></figure>

<p>注意不要从/libevent/libevent的release处下载，两个文件的hash值不同，我就遇到下面的报错</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210227011514.png" alt="image-20210227011513933"> </p>
<p>注意下载后的文件要更名为<code>libevent-libevent-release-2.1.12-stable.tar.gz</code></p>
<p>这是利用了vcpkg的缓存机制，类似scoop 的cache功能。</p>
<p>下图是手动下载安装包重新安装的过程</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210227012541.png" alt="image-20210227012540750"></p>
<p>安装过程：</p>
<p>下载安装包</p>
<p>解压出源码编译安装</p>
<p>指定安装的triplets</p>
<p>格式：库名称<library>：三元组<triplets>（x86-windows， x64-windows， x64-linux， x64-osx）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpkg install boost:x64-windows</span><br></pre></td></tr></table></figure>

<p>如何制作一个vcpkg安装包，如何提PR</p>
<p><a href="https://blog.csdn.net/zhangzq86/article/details/78016991">https://blog.csdn.net/zhangzq86/article/details/78016991</a></p>
<p><a href="https://www.jianshu.com/p/9b72a57499c6">https://www.jianshu.com/p/9b72a57499c6</a></p>
<p>reference：<a href="https://blog.csdn.net/cjmqas/article/details/79282847">https://blog.csdn.net/cjmqas/article/details/79282847</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/%E5%90%84%E7%BC%96%E8%AF%91%E5%99%A8%E5%AF%B9c++%E6%A0%87%E5%87%86%E7%9A%84%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<p>各编译器对c++标准的支持</p>
<p><a href="https://en.cppreference.com/w/cpp/compiler_support">https://en.cppreference.com/w/cpp/compiler_support</a></p>
<p>vs2019各版本对比</p>
<p><a href="https://visualstudio.microsoft.com/zh-hans/vs/compare/">https://visualstudio.microsoft.com/zh-hans/vs/compare/</a></p>
<p>vs中如何设置c++标准版本</p>
<p><a href="https://docs.microsoft.com/zh-cn/cpp/build/reference/std-specify-language-standard-version?view=msvc-160">https://docs.microsoft.com/zh-cn/cpp/build/reference/std-specify-language-standard-version?view=msvc-160</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/16/%E8%A7%A3%E5%86%B3vscode%E9%9B%86%E6%88%90%E7%BB%88%E7%AB%AF%E6%8C%89%E4%B8%8Bctrl+c%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<p>解决vscode集成终端按下ctrl+c无效</p>
<p>vscode terminal ctrl+c is invalid/ don’t work</p>
<h2 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h2><p>linux bash 或cmd 或powershell按下<code>ctrl+c</code>可以终止终端中当前正在运行的程序，并开启新的提示符</p>
<p>我的集成终端有wsl-bash  wsl-fish cmd powershell,按下ctrl+c后都无效果，网上找到一种解决办法</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p><a href="https://stackoverflow.com/questions/45257525/make-ctrlc-copy-and-ctrlshiftc-interrupt-in-vscode-terminal">Make Ctrl+C=copy and Ctrl+Shift+C=interrupt in VSCode terminal</a></p>
<p><a href="https://stackoverflow.com/questions/56469080/how-can-i-make-cmdc-send-ctrlc-in-vs-codes-terminal-in-macos">How can I make cmd+c send ctrl+c in VS Code’s terminal, in macOS?</a></p>
<p>vscode docs对这个workbench.action.terminal.sendSequence作用的介绍</p>
<p><a href="https://code.visualstudio.com/docs/editor/integrated-terminal#_send-text-from-a-keybinding">Integrated Terminal in Visual Studio Code</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;key&quot;: &quot;cmd+c&quot;,</span><br><span class="line">    &quot;command&quot;: &quot;workbench.action.terminal.sendSequence&quot;,</span><br><span class="line">    &quot;args&quot;: &#123; &quot;text&quot;: &quot;\u0003&quot; &#125;,</span><br><span class="line">    &quot;when&quot;: &quot;terminalFocus&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按截图中的设置keybindings.json就好了</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210311013431.png" alt="image-20210311013423875"></p>
<h2 id="无效的原因和另一种解决办法"><a href="#无效的原因和另一种解决办法" class="headerlink" title="无效的原因和另一种解决办法"></a>无效的原因和另一种解决办法</h2><p>ctrl+c能终止程序是个很自然的事，为什么不行呢？</p>
<p>观察我的vscode key 设置，发现有很多ctrl+c或包含它的组合键（其中有些是我以前安装了ctags扩展导致的改键），这些导致了按键的冲突，很自然的想到，如果把这些改键恢复到默认，是不是就行了呢？</p>
<p>在我设置这些改键为默认键后，发现不需要上面的workbench.action.terminal.sendSequence设置，ctrl+c就能在各种终端中正常工作了。</p>
<p>如果我需要保留那些ctrl+c的组合键，使用workbench.action.terminal.sendSequence就是有用的</p>
]]></content>
  </entry>
  <entry>
    <title>cmd脚本解释</title>
    <url>/2021/02/23/cmd%E8%84%9A%E6%9C%AC%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p>@echo off</p>
<p>:fun1<br>if not exist “%1” (echo New post filename requried)^<br>else (copy “%1” E:\HexoBlog\source_posts &amp;&amp; cmd /c “cd /d E:\HexoBlog\source_posts &amp;&amp; git status &amp;&amp; git add . &amp;&amp; git commit -m “add new post” &amp;&amp; cd /d E:\HexoBlog &amp;&amp; hexo g “)<br>goto:eof</p>
<p>call fun1</p>
<p>Rem 该脚本可以在cmd和powershell中运行<br>Rem 进入某个目录并执行命令，不切换当前cmd窗口的路径，而是另开一个cmd<br>Rem 复制新文件到E:\HexoBlog\source_posts目录，执行git命令，再执行hexo命令，最后再退回powershell环境<br>Rem else语句换行需要用符号^^连接<br>Rem git add . 暂存当前目录下所有新文件和修改的文件</p>
]]></content>
  </entry>
  <entry>
    <title>Win10自带mail客户端设置</title>
    <url>/2021/02/22/Win10%E8%87%AA%E5%B8%A6Outlook%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="邮件客户端版本"><a href="#邮件客户端版本" class="headerlink" title="邮件客户端版本"></a>邮件客户端版本</h2><p>本文所使用的Outlook是Win10家庭版1909自带的邮件桌面客户端，非Office或Office365包含的Outlook,该Outlook账户可以登录网页版。</p>
<h2 id="设置收发邮件的自动归档"><a href="#设置收发邮件的自动归档" class="headerlink" title="设置收发邮件的自动归档"></a>设置收发邮件的自动归档</h2><p>Win10自带邮件客户端上没有自定义收信规则的功能，<code>移动到某个文件夹</code>有，但是前者可以在收发邮件时自动归类，发邮件也是可以归类的，但是一般放在发件箱就够了。</p>
<p>这个邮件客户端是阉割版的，让我以为Outlook的自动分类需要购买收费版，查看了QQ邮箱，发现免费的QQ邮箱有这个功能，那Outlook应该也免费有。登录了Outlook Web端，才能找到这个功能，web端相比这个客户端设置功能更丰富。</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201211041254.jpg"></p>
<h2 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h2><p>Web端和桌面端都支持自定义富文本签名</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201211041603.jpg"></p>
<h2 id="收发其他邮箱"><a href="#收发其他邮箱" class="headerlink" title="收发其他邮箱"></a>收发其他邮箱</h2><p>要在Outlook桌面客户端添加其他邮箱账户，需要先开启其他邮箱账户的pop/smtp 或imap/smtp服务。</p>
<p>pop/imap都是邮件获取协议，用于客户端从邮件服务器上download邮件,smtp用于上传邮件到服务器，</p>
<p>即发邮件。pop与imap的区别是pop只下载邮件，在邮件客户端的操作，如删除、移动，不会同步到服务器。</p>
<h3 id="QQ邮箱"><a href="#QQ邮箱" class="headerlink" title="QQ邮箱"></a>QQ邮箱</h3><p>如何开启qq邮箱的pop、imap\smtp服务，参考QQ邮箱的帮助中心</p>
<p><strong><em>密码项，此处不是填入QQ邮箱的登录密码，而是要填入QQ邮箱生成的授权码</em></strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201211042638.png" alt="image-20201211042638088"></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201211042153.png" alt="image-20201211042153388"></p>
<p><strong><em>更改邮箱同步设置项，用于设置服务器和收发规则</em></strong></p>
<p>服务器地址和端口号参见QQ邮箱帮助中心</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201211042328.png" alt="image-20201211042328871"></p>
<h3 id="新浪邮箱"><a href="#新浪邮箱" class="headerlink" title="新浪邮箱"></a>新浪邮箱</h3><p>和QQ邮箱差不多的步骤</p>
<h3 id="同步方式"><a href="#同步方式" class="headerlink" title="同步方式"></a>同步方式</h3><p>手动同步或者设置每隔一定时间自动收取邮件</p>
<h2 id="安全反思"><a href="#安全反思" class="headerlink" title="安全反思"></a>安全反思</h2><p>QQ邮箱和新浪邮箱都说采用授权码是为了用第三方邮件客户端登录邮箱时更安全，但是我在配置的过程中保留了授权码的截图，如果截图被他人获取，他人也能配置来收发我的邮件，除非邮件服务器能够在检测到异地第三方登录时启用验证服务，如手机验证码。</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201212172651.png" alt="image-20201212172643553"></p>
<p>在我从qq邮箱添加了Outlook邮箱后，给我发了安全提示邮件，可以看出安全系统检测到从**<code>新位置、新设备、新应用</code>**登录，就会被认为是异常活动。</p>
<h2 id="移动端、Web端、PC端"><a href="#移动端、Web端、PC端" class="headerlink" title="移动端、Web端、PC端"></a>移动端、Web端、PC端</h2><p>在win10 outlook桌面端添加其他邮箱账户后，并不能把其他邮箱同步到web端或者安卓端，所以还需要在安卓端继续添加其他邮箱。Web端同样需要添加。</p>
]]></content>
  </entry>
  <entry>
    <title>win10home-docker</title>
    <url>/2021/02/22/win10-home-docker/</url>
    <content><![CDATA[<h2 id="wsl如何升级到wsl2"><a href="#wsl如何升级到wsl2" class="headerlink" title="wsl如何升级到wsl2"></a>wsl如何升级到wsl2</h2><p>reference：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers">https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers</a></p>
<p><a href="https://docs.docker.com/docker-for-windows/wsl/">https://docs.docker.com/docker-for-windows/wsl/</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/reference">https://docs.microsoft.com/zh-cn/windows/wsl/reference</a></p>
<p><a href="https://docs.docker.com/docker-for-windows/install-windows-home/">https://docs.docker.com/docker-for-windows/install-windows-home/</a></p>
<p><a href="https://www.cnblogs.com/temari/p/13188168.html">https://www.cnblogs.com/temari/p/13188168.html</a></p>
<p><a href="https://github.com/microsoft/WSL/discussions/5922">https://github.com/microsoft/WSL/discussions/5922</a></p>
<p>docker run -it ubuntu bash  这个镜像最小化了，需要运行</p>
<h2 id="win10家庭版开启虚拟化"><a href="#win10家庭版开启虚拟化" class="headerlink" title="win10家庭版开启虚拟化"></a>win10家庭版开启虚拟化</h2><p><a href="https://docs.docker.com/docker-for-windows/troubleshoot/#hyper-v">https://docs.docker.com/docker-for-windows/troubleshoot/#hyper-v</a></p>
<p>wsl和wsl2可以互相切换，切换到wsl2后，不需要重新安装disto,docker Desktop for windows只支持wsl2，为了在win10家庭版下使用docker，需要进行切换</p>
<p>To check the WSL mode, run:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl.exe -l -v</span><br></pre></td></tr></table></figure>

<p>To upgrade your existing Linux distro to v2, run:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl.exe --set-version (distro name) 2</span><br></pre></td></tr></table></figure>

<p>To set v2 as the default version for future installations, run:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl.exe --set-default-version 2</span><br></pre></td></tr></table></figure>



<p>运行<code>wsl.exe --set-version (distro name) 2</code>需要几分钟，此时wsl已经切换到wsl2,然后运行</p>
<p><code>wsl  --distribution (distro name)</code>启动wsl2的disto(不需要再重新安装：wsl install (distro name) )</p>
<p>运行<code>docker run hello-world</code>测试是否正常，如果出现”<code>Unable to find image &#39;hello-world:latest&#39; locally</code>“,是因为docker还没有从hub上pull镜像到本地，稍等下就可以了</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210218150541.png" alt="image-20210218150534442"></p>
<p>列出所有安装的image</p>
<p>docker image ls</p>
<p>运行某个镜像</p>
<p>docker run  image-name</p>
<h2 id="docker替换源"><a href="#docker替换源" class="headerlink" title="docker替换源"></a>docker替换源</h2><p>docker在不同平台替换源的配置方式不同，参考<a href="https://docs.docker.com/engine/reference/commandline/dockerd/">dockerd | Docker Documentation</a>，搜索<code>configuration file</code>可以找到windows平台的配置方式</p>
<p>docker官方推出了中国源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;registry-mirrors&quot;: [</span><br><span class="line">		&quot;registry.docker-cn.com&quot;</span><br><span class="line">	]</span><br></pre></td></tr></table></figure>

<p>docker-desktop-for-windows的config file</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210219225756.png" alt="image-20210219225756676"></p>
<p>位于C:\Users\hcf\AppData\Roaming\Docker\last-start-linux-daemon.json</p>
<p>或者C:\Users\hcf\.docker\daemon.json 这两个文件内容一致</p>
]]></content>
  </entry>
  <entry>
    <title>python</title>
    <url>/2021/02/22/python/</url>
    <content><![CDATA[<p>python</p>
<p>[toc]</p>
<h1 id="pip国内源配置"><a href="#pip国内源配置" class="headerlink" title="pip国内源配置"></a>pip国内源配置</h1><p>pip install安装包时是用从<code>The Python Package Index</code><a href="https://pypi.org/%E4%B8%8B%E8%BD%BD%EF%BC%8C%E9%80%9F%E5%BA%A6%E8%BE%83%E6%85%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90">https://pypi.org/下载，速度较慢，可以配置为国内源</a></p>
<p>清华开源镜像站pipy地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p>
<ul>
<li><p>临时使用命令：</p>
<blockquote>
<p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> some-package</p>
</blockquote>
<p>-i选项制定了源地址</p>
</li>
<li><p>永久配置（参见<a href="https://pip.pypa.io/en/stable/user_guide/">https://pip.pypa.io/en/stable/user_guide/</a> 关于index-url）<br>在C:\Users\username\AppData\Roaming\pip下新建一个pip.ini文件，写入</p>
<blockquote>
<p>[global]</p>
<p>index-url = <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>[install]</p>
<p>trusted-host = pypi.tuna.tsinghua.edu.cn</p>
</blockquote>
</li>
</ul>
<p>使用pip download packagename 某个包，从输出查看是否使用了指定的源</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201125014112.png" alt="image-20201125014105622"></p>
<p>for /r . %i in (dota*.exe) do @echo %i</p>
]]></content>
  </entry>
  <entry>
    <title>Picgo图床</title>
    <url>/2021/02/22/Picgo%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="Picgo图床"><a href="#Picgo图床" class="headerlink" title="Picgo图床"></a>Picgo图床</h1><h2 id="Word与md文档存储图片"><a href="#Word与md文档存储图片" class="headerlink" title="Word与md文档存储图片"></a>Word与md文档存储图片</h2><p>word文档或者笔记软件插入图片，图片存储在文档本身里，这些文档是二进制的，需要对应软件才能打开。</p>
<p>markdown或html文档里插入的图片无法存储在文档里，只能以地址形式连接到文档，这样造成了文档与图片的分离。</p>
<p>图片可以存储在本地，与文档一起，也可以存到某个网络服务器上，图床就是这样的一个网络服务器。</p>
<p>图床可以选择付费的云盘、VPS、云主机，或者托管的免费主机，如github、gitee。</p>
<p><strong><a href="https://github.com/Molunerfinn/PicGo">Picgo</a>实现了图片的自动上传与相册管理，支持多种图床，可以随时切换，可设置上传时的默认图床。</strong></p>
<h2 id="Gitee图床设置"><a href="#Gitee图床设置" class="headerlink" title="Gitee图床设置"></a>Gitee图床设置</h2><p>Picgo有插件仓库，使用Gitee作图床需要下载插件</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201125181222.png" alt="image-20201125181222214" style="zoom: 80%;" />

<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201125171254.png" alt="image-20201125171253936" style="zoom:80%;" />

<ul>
<li>owner:gitee username，如果username有空格，使用<a href="https://gitee.com/lensousou/imagerepo%E5%9C%B0%E5%9D%80%E9%87%8C%E7%9A%84%E5%90%8D%E5%AD%97">https://gitee.com/lensousou/imagerepo地址里的名字</a></li>
<li>repo:存放图片的仓库名，注意仓库不能为private，否则无法上传，因为private repository对他人不具有可见性</li>
<li>path:可以不填，上传时会自动生成，图中设置为img/(不用先在repo里先建立该目录),上传的图片就存放在这个文件夹下</li>
<li>token：私人令牌，其实是个授权码，提供了Picgo对仓库数据的访问权限</li>
<li>message：图片每次上传就是对repo的一次commit，这就是commit信息</li>
</ul>
<h2 id="Gitee-API"><a href="#Gitee-API" class="headerlink" title="Gitee API"></a>Gitee API</h2><p>gitee提供了API，第三方可以用于访问gitee的用户数据</p>
<p><a href="https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoStargazers?ex=no">https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoStargazers?ex=no</a></p>
<p>token就是这些API需要提供的参数之一</p>
<h2 id="Github图床设置"><a href="#Github图床设置" class="headerlink" title="Github图床设置"></a>Github图床设置</h2><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201125172633.png" alt="image-20201125172633508" style="zoom:80%;" />

<ul>
<li><p>注意设定仓库名，不要复制下图中的，复制的会产生空格，导致后续上传错误，可见Picgo issue仓库</p>
<p><a href="https://github.com/Molunerfinn/PicGo/issues/585">https://github.com/Molunerfinn/PicGo/issues/585</a></p>
</li>
</ul>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201125172801.png" alt="image-20201125172801645"></p>
<ul>
<li>分支名：由于github对美国BLM运动的响应，新建仓库默认分支名不再用master，改用main</li>
</ul>
<h2 id="Picgo日志文件"><a href="#Picgo日志文件" class="headerlink" title="Picgo日志文件"></a>Picgo日志文件</h2><p>此处可以打开picgo上传产生的log，上传时如果错误，可以查看log，反馈到Picgo issue仓库</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201125173610.png" alt="image-20201125173610771" style="zoom:80%;" />

<h2 id="Picgo配置文件"><a href="#Picgo配置文件" class="headerlink" title="Picgo配置文件"></a>Picgo配置文件</h2><p>data.json存放了上传图片的信息以及图床信息。这是个明文文件，存储在本地，随着图片的大量上传，文件会迅速膨胀。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;fileName&quot;</span>: <span class="string">&quot;20201125174335.png&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;width&quot;</span>: <span class="number">798</span>,</span><br><span class="line">    <span class="attr">&quot;height&quot;</span>: <span class="number">438</span>,</span><br><span class="line">    <span class="attr">&quot;extname&quot;</span>: <span class="string">&quot;.png&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;imgUrl&quot;</span>: <span class="string">&quot;https://gitee.com/lensousou/imagerepo/raw/master/img//20201125174335.png&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;gitee&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;9bb7766d-4d54-4c37-97ec-16e9509dd071&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&quot;picBed&quot;: &#123;</span><br><span class="line">  &quot;current&quot;: &quot;gitee&quot;,</span><br><span class="line">  &quot;github&quot;: &#123;</span><br><span class="line">    &quot;branch&quot;: &quot;main&quot;,</span><br><span class="line">    &quot;customUrl&quot;: &quot;https://github.com/huangchaof/tutuchuang&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;img/&quot;,</span><br><span class="line">    &quot;repo&quot;: &quot;huangchaof/tutuchuang&quot;,</span><br><span class="line">    &quot;token&quot;: &quot;*********************&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>token明文保存，这其实违背了token的安全性</p>
<h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><p>提供了上传图片的预览功能</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201125174335.png" alt="image-20201125174335507"></p>
<h2 id="上传大图片"><a href="#上传大图片" class="headerlink" title="上传大图片"></a>上传大图片</h2><p>从实际使用效果看，几M的图片可以上传到gitee，但是上传速度慢，阅读时也无法加载，可以把图片压缩为几百K再上传</p>
<h2 id="打开Picgo上传图片重命名"><a href="#打开Picgo上传图片重命名" class="headerlink" title="打开Picgo上传图片重命名"></a>打开Picgo上传图片重命名</h2><p>如果上传图片重名，会上传失败，可以在设置里打开<code>时间戳重命名</code></p>
<h2 id="遇到错误解决思路"><a href="#遇到错误解决思路" class="headerlink" title="遇到错误解决思路"></a>遇到错误解决思路</h2><p><strong>错误</strong>：我在配置github图床时，无法上传，其中是两个错误导致的</p>
<ul>
<li>github仓库设置为private</li>
<li>设定仓库名复制时引入了空格</li>
</ul>
<p><strong>解决过程</strong>：一开始查看了许多中文教程，去发现自己配置不对的地方，但是教程中往往没有显示提示这两个细节。某个时间点我进入配置文件，发现了github仓库名中引入了空格，修改了文件，但是没有在picgo的设置窗口进行修改，所以还是upload failure.</p>
<p>我在picgo的issue仓库中发现有大量类似issue才意识到,最终通过在设置窗口修改保存，并重启了picgo，才解决错误。为了避免后续还有人困惑，在picgo issue 585留下了回复。</p>
<p><code>修改软件配置有时需要重启软件才能生效</code></p>
<p><strong>结论</strong>：这种开源软件的问题有可能在中文教程中得到解决，但最有可能的方式是去查看issue</p>
]]></content>
  </entry>
  <entry>
    <title>office2019激活方式</title>
    <url>/2021/02/22/office%202019%E6%BF%80%E6%B4%BB%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="更方便的方式"><a href="#更方便的方式" class="headerlink" title="更方便的方式"></a>更方便的方式</h1><p><a href="https://otp.landian.vip/zh-cn/">https://otp.landian.vip/zh-cn/</a></p>
<p>以下是自己手动方式</p>
<h1 id="office-2019安装包哪儿下载"><a href="#office-2019安装包哪儿下载" class="headerlink" title="office 2019安装包哪儿下载"></a>office 2019安装包哪儿下载</h1><p><a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p>
<p>下载这个文件Office Professional Plus 2019 (x86 and x64) - DVD (Chinese-Simplified)</p>
<p>，它是官方原版镜像文件</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210118164441.png" alt="image-20210118164434736"></p>
<p>复制ed2k地址用迅雷下载。</p>
<h1 id="零售版转换为批量授权版"><a href="#零售版转换为批量授权版" class="headerlink" title="零售版转换为批量授权版"></a>零售版转换为批量授权版</h1><p>KMS激活只适合批量授权版，如果是零售版的office安装包，需要转换。</p>
<p>把下面的文本写到txt文件里，把txt文件改成bat文件运行就能实现转换。</p>
<p>cmd窗口出现<code>Retail to Volume License conversion finished</code>就表示转换成功了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:ADMIN</span><br><span class="line">openfiles &gt;nul 2&gt;nul ||(</span><br><span class="line">echo CreateObject^(&quot;Shell.Application&quot;^).ShellExecute &quot;%~s0&quot;, &quot;&quot;, &quot;&quot;, &quot;runas&quot;, 1 &gt;&gt; &quot;%temp%\getadmin.vbs&quot;</span><br><span class="line">&quot;%temp%\getadmin.vbs&quot; &gt;nul 2&gt;&amp;1</span><br><span class="line">goto:eof</span><br><span class="line">)</span><br><span class="line">del &#x2F;f &#x2F;q &quot;%temp%\getadmin.vbs&quot; &gt;nul 2&gt;nul</span><br><span class="line"></span><br><span class="line">for &#x2F;f &quot;tokens&#x3D;6 delims&#x3D;[]. &quot; %%G in (&#39;ver&#39;) do set win&#x3D;%%G</span><br><span class="line"></span><br><span class="line">setlocal</span><br><span class="line"></span><br><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line">Title Office 2019 Retail to Volume License Converter</span><br><span class="line"></span><br><span class="line">rem SET OfficePath&#x3D;%ProgramFiles%\Microsoft Office</span><br><span class="line">SET OfficePath&#x3D;%ProgramFiles(x86)%\Microsoft Office</span><br><span class="line">if not exist &quot;%OfficePath%\root\Licenses16&quot; SET OfficePath&#x3D;%ProgramFiles(x86)%\Microsoft Office</span><br><span class="line">if not exist &quot;%OfficePath%\root\Licenses16&quot; (</span><br><span class="line">    echo Could not find the license files for Office 2019!</span><br><span class="line">    pause</span><br><span class="line">    goto :eof</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo Press Enter to start VL-Conversion...</span><br><span class="line">echo.</span><br><span class="line">pause</span><br><span class="line">echo.</span><br><span class="line">cd &#x2F;D &quot;%SystemRoot%\System32&quot;</span><br><span class="line"></span><br><span class="line">if %win% GEQ 9200 (</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\ProPlus2019VL_KMS_Client_AE-ppd.xrm-ms&quot;</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\ProPlus2019VL_KMS_Client_AE-ul.xrm-ms&quot;</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\ProPlus2019VL_KMS_Client_AE-ul-oob.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\client-issuance-bridge-office.xrm-ms</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\client-issuance-root.xrm-ms</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\client-issuance-root-bridge-test.xrm-ms</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\client-issuance-stil.xrm-ms</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\client-issuance-ul.xrm-ms</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\client-issuance-ul-oob.xrm-ms</span><br><span class="line">    cscript slmgr.vbs &#x2F;ilc &quot;%OfficePath%\root\Licenses16\pkeyconfig-office.xrm-ms</span><br><span class="line">)</span><br><span class="line"> if %win% LSS 9200 (</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\ProPlus2019VL_KMS_Client_AE-ppd.xrm-ms&quot;</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\ProPlus2019VL_KMS_Client_AE-ul.xrm-ms&quot;</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\ProPlus2019VL_KMS_Client_AE-ul-oob.xrm-ms&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-bridge-office.xrm-ms</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-root.xrm-ms</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-root-bridge-test.xrm-ms</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-stil.xrm-ms</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-ul.xrm-ms</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\client-issuance-ul-oob.xrm-ms</span><br><span class="line">    cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inslic:&quot;%OfficePath%\root\Licenses16\pkeyconfig-office.xrm-ms</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;inpkey:NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</span><br><span class="line">cscript &quot;%OfficePath%\Office16\ospp.vbs&quot; &#x2F;act</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">echo Retail to Volume License conversion finished.</span><br><span class="line">echo.</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>



<h1 id="KMS激活步骤"><a href="#KMS激活步骤" class="headerlink" title="KMS激活步骤"></a>KMS激活步骤</h1><p>按照<a href="https://03k.org/kms.html%E7%9A%84%E6%96%B9%E6%B3%95%E5%81%9A%E3%80%82">https://03k.org/kms.html的方法做。</a></p>
<p>cmd里比如我自己执行两条命令如下：</p>
<p>cscript  “C:\Program Files (x86)\Microsoft Office\Office16\OSPP.VBS” /sethst:kms.03k.org</p>
<p>cscript “C:\Program Files (x86)\Microsoft Office\Office16\OSPP.VBS” /act</p>
<p>出现<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210118165259.png" alt="image-20210118165259275">就激活成功了</p>
<p>如果你的OSPP.VBS文件路径和我的不一样 ，请输入：</p>
<p>cscript <code>你的ospp.vbs路径</code> /sethst:kms.03k.org</p>
<p>cscript <code>你的ospp.vbs路径</code> /act</p>
<h1 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h1><p><a href="https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks">https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks</a></p>
<p><a href="https://www.bilibili.com/read/cv6907989/">https://www.bilibili.com/read/cv6907989/</a></p>
]]></content>
  </entry>
  <entry>
    <title>MSI-GP62-6QG拆机换硬盘</title>
    <url>/2021/02/22/MSI-GP62-6QG%E6%8B%86%E6%9C%BA%E6%8D%A2%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="MSI-GP62-6QG拆机换硬盘"><a href="#MSI-GP62-6QG拆机换硬盘" class="headerlink" title="MSI-GP62-6QG拆机换硬盘"></a>MSI-GP62-6QG拆机换硬盘</h1><p>原装硬盘为一个海力士SSD和一个日立HDD。由于这个日立HDD坏道了，无法进入操作系统（win10本身没有错误），我用一个Sandisk SSD替换了坏道的硬盘。</p>
<h1 id="拆机工具"><a href="#拆机工具" class="headerlink" title="拆机工具"></a>拆机工具</h1><p>有的笔记本自行拆机很麻烦，而且会影响保修，我这个型号的只需要螺丝刀和垫片就行，自行拆机也不影响保修。</p>
<p>淘宝的拆机工具很便宜，单买31合1可能就10块钱包邮，京东相对价格贵，但是京东物流当天下单，第二天就到。</p>
<p>我着急用，买了两套。</p>
<p><strong>31合一螺丝刀（淘宝买的拆机清灰套装）</strong></p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201164833.png" alt="image-20201201164833268" style="zoom: 50%;" />

<p><strong>京东买的</strong></p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201165105.png" alt="image-20201201165104964" style="zoom: 50%;" />

<p>批头和起子上都有磁力，避免螺丝掉落。垫片用于拆分后盖，如果用蛮力拆后盖，可能会损坏后盖。</p>
<h1 id="拆机过程"><a href="#拆机过程" class="headerlink" title="拆机过程"></a>拆机过程</h1><h2 id="拆除后盖"><a href="#拆除后盖" class="headerlink" title="拆除后盖"></a>拆除后盖</h2><p>拆下后盖上的螺丝，发现在光驱位置还有三颗螺丝，拆了才能卸后盖</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201185506.jpg" style="zoom:50%;" />

<p>用垫片沿着机身缝隙撬动，拆下后盖</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201180246.jpg" style="zoom: 33%;" />

<h2 id="机身内部构造"><a href="#机身内部构造" class="headerlink" title="机身内部构造"></a>机身内部构造</h2><p>主板上有两个内存插口，可以扩展为双通道内存</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201181213.jpg" style="zoom: 67%;" />

<h3 id="内存插槽特写"><a href="#内存插槽特写" class="headerlink" title="内存插槽特写"></a>内存插槽特写</h3><p>Kingston ddr4 8G内存，还有一个插槽可以扩充内存</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201233458.jpg" style="zoom:50%;" />



<h3 id="Killer有线网卡和无线网卡"><a href="#Killer有线网卡和无线网卡" class="headerlink" title="Killer有线网卡和无线网卡"></a>Killer有线网卡和无线网卡</h3><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201233804.jpg" style="zoom:50%;" />

<h3 id="win10系统所在SSD"><a href="#win10系统所在SSD" class="headerlink" title="win10系统所在SSD"></a>win10系统所在SSD</h3><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201234032.jpg" style="zoom:50%;" />



<h2 id="更换SanDisk-SSD"><a href="#更换SanDisk-SSD" class="headerlink" title="更换SanDisk SSD"></a>更换SanDisk SSD</h2><p>主板原有的HDD接口为sata，SSD有多种接口，这个是sata3接口的，兼用sata和sata2接口</p>
<p>官网信息<a href="https://shop.westerndigital.com/zh-cn/products/internal-drives/sandisk-ultra-3d-sata-iii-ssd#SDSSDH3-250G-Z2"><strong>闪迪至尊高速™ 3D 固态硬盘</strong></a></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201181610.jpg"></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201181705.jpg"></p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201181751.jpg" style="zoom:50%;" />



<h2 id="螺丝滑丝"><a href="#螺丝滑丝" class="headerlink" title="螺丝滑丝"></a>螺丝滑丝</h2><p>在拆除这个螺丝时，竟然滑丝了，换了几个批头还是使不上劲，最后用一个一字批头<strong>垂直用力顶住螺丝</strong>，突然可以拧动了。如果一直拧不开，我也只能去维修店了，但是一些维修店不愿意接这种活，或者收费贵，或者没有工具。</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201181955.jpg" style="zoom:50%;" />

<h1 id="防静电"><a href="#防静电" class="headerlink" title="防静电"></a>防静电</h1><p>冬天手指可能带有静电，与笔记本内部件解除时，有极小的概率会击穿电容，损坏部件，所以最安全的拆机要有防静电操作，淘宝清灰套装里送的手套就是干这个的。</p>
<h1 id="补充信息"><a href="#补充信息" class="headerlink" title="补充信息"></a>补充信息</h1><p>微星笔记本公众号发布的信息</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/dzZV9qSTofL9eWkU3g3E7g">教你清灰换硅脂+升级硬盘+升级内存</a></li>
<li><a href="https://mp.weixin.qq.com/s/VN4H49juvpQRO56rag_HNA">MSIF3一键还原出厂系统与win10自带系统重置功能</a></li>
<li><a href="https://mp.weixin.qq.com/s/lkxHnT1Jp_RJPcERe0sciA">GS65拆解视频</a></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>需要好的拆机工具，如果工具和螺丝吻合度不好，或者批头容易变形，可能会拆机困难，如螺丝滑丝了。</li>
<li>更换硬盘或者内存条等要注意接口是否被主板支持</li>
<li>拆第一次后，后续扩充内存，清灰都可以自己动手</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>hexo博客搭建备忘</title>
    <url>/2021/02/22/hexo%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<p>hexo搭建的博客，参考一个博主 <a href="https://tding.top/tools/">https://tding.top/tools/</a></p>
]]></content>
  </entry>
  <entry>
    <title>chrome浏览器扩展</title>
    <url>/2021/02/22/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="chrome浏览器扩展"><a href="#chrome浏览器扩展" class="headerlink" title="chrome浏览器扩展"></a>chrome浏览器扩展</h1><p>国内无法访问chrome扩展商店，如果从某些下载站下载，可能会有安全风险，有个第三方网站提供了扩展的搜索与下载</p>
<p><a href="https://www.crx4chrome.com/">https://www.crx4chrome.com/</a></p>
<p>扩展安装方式</p>
<ol>
<li>不启用开发者模式，拖拽crx文件到chrome窗口无法安装<br><em>此行占位行，使用shift+enter强制换行功能可以这样，如果只输入</em><br><em>enter会开启新的列表</em></li>
<li>启用chrome开发者模式，可以解压缩.crx文件，<br>导入该文件夹即可安装</li>
</ol>
<h1 id="edge-translate扩展"><a href="#edge-translate扩展" class="headerlink" title="edge translate扩展"></a>edge translate扩展</h1><p>提供在当前页面对选中文字翻译，在当前页面的侧边显示翻译结果，提供了沉浸式阅读的体验</p>
<p><a href="https://github.com/EdgeTranslate/EdgeTranslate">https://github.com/EdgeTranslate/EdgeTranslate</a></p>
<h1 id="sha值计算比较"><a href="#sha值计算比较" class="headerlink" title="sha值计算比较"></a>sha值计算比较</h1><p>一般下载文件时，官方会提供文件的sha值，如果文件内容发生改变（文件名改变无影响），文件的sha值会变化。所以验证文件是否与官方相同的方式就是比较sha值是否相同。</p>
<p><a href="https://www.7-zip.org/">https://www.7-zip.org/</a> 是一款开源的免费压缩软件，它提供了在windows菜单右键计算sha值功能</p>
]]></content>
  </entry>
  <entry>
    <title>The Elder Scrolls V：Skyrim Special Edition</title>
    <url>/2021/02/22/The%20Elder%20Scrolls%20V%EF%BC%9ASkyrim%20Special%20Edition/</url>
    <content><![CDATA[<h1 id="游戏本体和资源"><a href="#游戏本体和资源" class="headerlink" title="游戏本体和资源"></a>游戏本体和资源</h1><p>以下用上古5代指上古卷轴五重置版，本文所使用的上古五游戏本体程序来自于3DM，《上古卷轴5：天际重制版》3DM免安装官方中文未加密版：<a href="https://dl.3dmgame.com/pc/83371.html,%E7%89%88%E6%9C%AC%E5%8F%B7%E4%BD%8D1.5.16">https://dl.3dmgame.com/pc/83371.html,版本号位1.5.16</a></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201213181723.png" alt="image-20201213181715963"></p>
<h1 id="物品、魔法、交易界面美化"><a href="#物品、魔法、交易界面美化" class="headerlink" title="物品、魔法、交易界面美化"></a>物品、魔法、交易界面美化</h1><p>原版的这些界面使用不方便，加装Mod可以美化这些界面。需要两个Mod:</p>
<h2 id="Skyrim-Script-Extender-SKSE"><a href="#Skyrim-Script-Extender-SKSE" class="headerlink" title="Skyrim Script Extender (SKSE)"></a>Skyrim Script Extender (SKSE)</h2><p>SKYUI需要这个mod,其他的许多mod也需要其支持，所以最先安装的就是SKSE。</p>
<p>注意2011年的上古5是32位程序，原有SKSE也是32位的，所以重置版需要使用新版的SKSE64。3DM有很多SKSE，也有64位的SKSE，但需要Skyrim版本号和SKSE对应，对应关系可以看下载的压缩包里的文档skse64_whatsnew.txt</p>
<p>在官网<a href="https://skse.silverlock.org/%E6%9C%89%E4%BC%97%E5%A4%9A%E7%89%88%E6%9C%AC%E7%9A%84SKSE,%E5%A6%822.05%E7%89%88%E6%9C%AC%E6%94%AF%E6%8C%811.5.16%E7%89%88%E6%9C%AC%E3%80%823DM%E6%9C%89%E4%B8%8A%E5%8F%A4%E4%BA%94%E7%9A%84%E5%8D%87%E7%BA%A7%E8%A1%A5%E4%B8%81%EF%BC%8C%E5%A6%82%E3%80%8A%E4%B8%8A%E5%8F%A4%E5%8D%B7%E8%BD%B45%EF%BC%9A%E5%A4%A9%E9%99%85%E9%87%8D%E5%88%B6%E7%89%88%E3%80%8B">https://skse.silverlock.org/有众多版本的SKSE,如2.05版本支持1.5.16版本。3DM有上古五的升级补丁，如《上古卷轴5：天际重制版》</a> v1.5.80升级档+未加密补丁[3DM]：<a href="https://dl.3dmgame.com/patch/140660.html">https://dl.3dmgame.com/patch/140660.html</a></p>
<p>安装方式：把解压缩的文件放置到游戏的根目录（根目录也就是SkyrimSE.exe、SkyrimSELauncher.exe所在目录），如skse64_2_00_05.7z解压缩后结构如下，其中src是源码，可以删除。</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201213181934.png" alt="image-20201213181934177"></p>
<h2 id="SKYUI"><a href="#SKYUI" class="headerlink" title="SKYUI"></a>SKYUI</h2><p>没有看到SKYUI的官网，就在3DM下载了一个版本，上古卷轴5：天际重制版 天际界面SkyUI v5.2汉化版：<a href="https://dl.3dmgame.com/patch/118634.html">https://dl.3dmgame.com/patch/118634.html</a> </p>
<p>安装方式是使用Mod管理器<strong>Mod Organizer</strong>，《ModOganizer》补丁管理工具v2.1.5汉化中文版：<a href="https://dl.3dmgame.com/patch/129028.html%E3%80%82%E5%85%B7%E4%BD%93%E6%93%8D%E4%BD%9C%E5%8F%82%E8%A7%81%E4%B8%A4%E4%B8%AA%E5%8E%8B%E7%BC%A9%E5%86%85%E8%87%AA%E5%B8%A6%E7%9A%84%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3%E3%80%82">https://dl.3dmgame.com/patch/129028.html。具体操作参见两个压缩内自带的说明文档。</a></p>
<h2 id="游戏启动"><a href="#游戏启动" class="headerlink" title="游戏启动"></a>游戏启动</h2><p>安装这个两个Mod之后，不再用SkyrimSE.exe启动，可以从<strong>Mod Organizer</strong>里启动skse64_loader.exe来启动上古五</p>
<h2 id="美化效果"><a href="#美化效果" class="headerlink" title="美化效果"></a>美化效果</h2><p><strong>武器物品</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201213183256.jpg"></p>
<p><strong>全部物品</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201213183414.jpg"></p>
<p><strong>魔法</strong></p>
<p><img src="C:\Users\hcf\AppData\Roaming\Typora\typora-user-images\image-20201213183647623.png" alt="image-20201213183647623"></p>
<p><strong>交易</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201213184001.jpg"></p>
<h1 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h1><p>原版技能树界面其实也不好用，应该有这方面的Mod，后续修改</p>
]]></content>
  </entry>
  <entry>
    <title>The Elder Scrolls V：Skyrim Special Edition-2</title>
    <url>/2021/02/22/%E5%BC%80%E9%94%81/</url>
    <content><![CDATA[<p>天际的非官方wiki</p>
<p><a href="http://en.uesp.net/wiki/Skyrim:Skyrim">http://en.uesp.net/wiki/Skyrim:Skyrim</a></p>
<p><a href="http://elderscrolls.wikia.com/wiki/The_Elder_Scrolls_Wiki">http://elderscrolls.wikia.com/wiki/The_Elder_Scrolls_Wiki</a></p>
<p><a href="http://2143.replace.favo.diafeng.cn/">http://2143.replace.favo.diafeng.cn/</a></p>
<p>天将烽火，一位mod大佬自建的网站</p>
<p><a href="https://magicskyrim.com/archives/2336">https://magicskyrim.com/archives/2336</a></p>
<p><a href="https://space.bilibili.com/113268323">https://space.bilibili.com/113268323</a></p>
<p>控制台信息</p>
<p><a href="http://en.uesp.net/wiki/Skyrim:Console">http://en.uesp.net/wiki/Skyrim:Console</a></p>
<p>斯万的三角恋任务</p>
<p><a href="http://en.uesp.net/wiki/Skyrim:A_Lovely_Letter,%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%88%B0%E4%BB%BB%E5%8A%A1id%E5%92%8C%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%90%84%E4%B8%AA%E9%98%B6%E6%AE%B5stage">http://en.uesp.net/wiki/Skyrim:A_Lovely_Letter,可以查看到任务id和任务的各个阶段stage</a></p>
<p>由于误帮助了斯万，任务进行到了阶段220，想改为帮助另一个，使用了setstage 240,可以开启和Faendal的交谈，但是似乎已经完成的阶段无法再重新开启，也就是无法再重新开始任务。</p>
<p>player.sqs 任务id 可以查看任务各个阶段，0是没有完成，1是已完成</p>
<p>setstage 240后，来到房子，晚上要解锁</p>
<p>关于任务是否可以重新开始的帖子</p>
<p><a href="https://tieba.baidu.com/p/5361813509">https://tieba.baidu.com/p/5361813509</a></p>
<p>待续</p>
<p>法术</p>
<p>雪漫城的古任法术有法术书卖，比如洞察术，治疗之手，一次加50点血的大治疗术</p>
<p>潜行</p>
<p>潜行攻击在没有perk的情况下，攻击伤害为双倍</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201215183833.jpg" style="zoom:50%;" />



<p>开锁</p>
<p>第一视角，打开控制台，鼠标点中要开的锁（一定要选对不然不能开），输入unlock，（会出现unlock□的字符，那就说明对了），关掉控制台，再用e开锁试试</p>
<p>还有一种办法是获取Faendal身上的钥匙</p>
<p>存档位置</p>
<p>C:\Users\hcf\Documents\My Games\Skyrim Special Edition\Saves</p>
<p>蔬菜汤配方：卷心菜，土豆，大葱，番茄</p>
<p>player.additem 000722BD 鹿排item 代码</p>
<p>食物代码</p>
<p><a href="https://www.3dmgame.com/gl/3583185_9.html">https://www.3dmgame.com/gl/3583185_9.html</a></p>
<p>中文发光路牌</p>
<p><a href="https://bbs.3dmgame.com/thread-5326590-1-1.html">https://bbs.3dmgame.com/thread-5326590-1-1.html</a></p>
<p>耐力的作用与消耗</p>
<p><a href="http://en.uesp.net/wiki/Skyrim:Stamina">http://en.uesp.net/wiki/Skyrim:Stamina</a></p>
<h1 id="《上古卷轴5：天际》全部技能100级升级方法"><a href="#《上古卷轴5：天际》全部技能100级升级方法" class="headerlink" title="《上古卷轴5：天际》全部技能100级升级方法"></a>《上古卷轴5：天际》全部技能100级升级方法</h1><p><a href="http://www.yxdown.com/gonglue/46633.html">http://www.yxdown.com/gonglue/46633.html</a></p>
<p>独孤城刷弓箭</p>
<p><a href="http://www.962.net/gl/26101.html">http://www.962.net/gl/26101.html</a></p>
<p>coc qasmoke 会把你传去一个拥有所有游戏物品 所有制造器具的房间</p>
<p> coc riverwood（溪木镇）</p>
<h1 id="上古卷轴5：天际重制版复制粘贴到控制台MOD"><a href="#上古卷轴5：天际重制版复制粘贴到控制台MOD" class="headerlink" title="上古卷轴5：天际重制版复制粘贴到控制台MOD"></a>上古卷轴5：天际重制版复制粘贴到控制台MOD</h1><p><a href="http://www.yxdown.com/gongju/237045.html">http://www.yxdown.com/gongju/237045.html</a> 这个mod好像没用</p>
<p>参考：</p>
<p>上古五的官方脚本开发语言是Papyrus，skse扩展了这个语言的功能</p>
<p>关于上古文件夹的各自作用，data,esp</p>
<p>什么是mesh（模型），什么是材质/贴图（texture）</p>
<p>树下肥猴的基础教学:<br>看 第二章 第1节：认识MOD<br><a href="http://bbs.3dmgame.com/thread-3316784-1-1.html">http://bbs.3dmgame.com/thread-3316784-1-1.html</a></p>
<p>贴吧的:<br><a href="http://tieba.baidu.com/p/1556108744">http://tieba.baidu.com/p/1556108744</a><br><a href="http://tieba.baidu.com/p/2416218382">http://tieba.baidu.com/p/2416218382</a></p>
<p>skyUI的mcm菜单 Mod Configuration Menu </p>
]]></content>
  </entry>
  <entry>
    <title>spacevim</title>
    <url>/2021/02/22/spacevim/</url>
    <content><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>spacevim的默认全局配置文件为C:\Users\hcf.SpaceVim.d\init.toml</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210220161244.png" alt="image-20210220161237660"></p>
<p>标签栏123可以用<code>&lt;leader&gt; number</code>快捷键切换，默认前缀键为<code>\</code></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210220161448.png" alt="image-20210220161447934"></p>
<p>在1和2切换用<code>spc number</code></p>
<p>如何启用模块</p>
<p><a href="https://spacevim.org/cn/layers/">可用模块 | SpaceVim</a></p>
<p>模块和插件的区别：colorscheme 模块为 SpaceVim 提供了一系列常用的颜色主题，包含了众多颜色插件，如下图第一次启用colorscheme 模块会下载插件</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210220164548.png" alt="image-20210220164548080"></p>
<p>更新模块</p>
<p>:SPUpdate</p>
<h1 id="十分钟Spacevim入门"><a href="#十分钟Spacevim入门" class="headerlink" title="十分钟Spacevim入门"></a>十分钟Spacevim入门</h1><p><a href="https://github.com/Jackiexiao/10-minutes-to-SpaceVim/blob/master/README-zh.md">https://github.com/Jackiexiao/10-minutes-to-SpaceVim/blob/master/README-zh.md</a></p>
<p>spacevim是如何启动的 </p>
<h2 id="几个可以预览的快捷键"><a href="#几个可以预览的快捷键" class="headerlink" title="几个可以预览的快捷键"></a>几个可以预览的快捷键</h2><p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210220225114.png" alt="image-20210220225114349"></p>
<h2 id="安装spacevim会修改原有的vim配置吗"><a href="#安装spacevim会修改原有的vim配置吗" class="headerlink" title="安装spacevim会修改原有的vim配置吗"></a>安装spacevim会修改原有的vim配置吗</h2><p>并不会<a href="https://spacevim.org/faq/#have-a-try-with-spacevim-without-overwrite-vimrc">have-a-try-with-spacevim-without-overwrite-vimrc</a></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210220231934.png" alt="image-20210220231934156"></p>
<h2 id="spacevim哪些选项可以在init-toml中配置呢？"><a href="#spacevim哪些选项可以在init-toml中配置呢？" class="headerlink" title="spacevim哪些选项可以在init.toml中配置呢？"></a>spacevim哪些选项可以在init.toml中配置呢？</h2><p>查看~/.SpaceVim/autoload/SpaceVim.vim</p>
<h1 id="命令备忘"><a href="#命令备忘" class="headerlink" title="命令备忘"></a>命令备忘</h1><p>CLI输入nvim，启动neovim</p>
<p>英文输入法模式下按下ESC，切换到normal模式，输入<code>:help</code>，查看neovim的帮助文档</p>
<p>在文档内跳转shortcuts: forward <code>ctrl-]</code>, backward <code>ctrl-o</code></p>
<p>交互教程，输入<code>:Tutor</code>启用，注意vim的命令区分大小写，tutor不会被识别</p>
<p>要检查nvim的状况，运行<code>:checkhealth</code></p>
<p>查看可以设置哪些选项 <code>:set all</code></p>
<p>查看某个命令的帮助 :help command ， 如<code>:help set</code></p>
<p>各选项简短说明 <a href="http://vimcdoc.sourceforge.net/doc/quickref.html#option-list">VIM: quickref (sourceforge.net)</a></p>
<h1 id="查看spacevim的安装脚本可以知道安装过程"><a href="#查看spacevim的安装脚本可以知道安装过程" class="headerlink" title="查看spacevim的安装脚本可以知道安装过程"></a>查看spacevim的安装脚本可以知道安装过程</h1><h1 id="vim插件网站"><a href="#vim插件网站" class="headerlink" title="vim插件网站"></a>vim插件网站</h1><p><a href="https://vimawesome.com/">https://vimawesome.com/</a></p>
<h1 id="vim发行版"><a href="#vim发行版" class="headerlink" title="vim发行版"></a>vim发行版</h1><p>在github搜索[Vim Distribution]</p>
<h1 id="vim速查表"><a href="#vim速查表" class="headerlink" title="vim速查表"></a><a href="https://github.com/skywind3000/awesome-cheatsheets/blob/master/editors/vim.txt">vim速查表</a></h1>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>换硬盘始末</title>
    <url>/2021/02/21/%E6%8D%A2%E7%A1%AC%E7%9B%98%E5%A7%8B%E6%9C%AB/</url>
    <content><![CDATA[<h1 id="故障起因"><a href="#故障起因" class="headerlink" title="故障起因"></a>故障起因</h1><p>最近有一天用迅雷下载了一集<a href="https://movie.douban.com/subject/30344167/">曼达洛人</a>，想看一下，点击了一直没反应，进入资源管理器某个分区，直接双击没反应，右键资源管理器会无响应,整个窗口直接卡死。当时以为是系统卡了，后来越来越严重，于是到网上查下解决办法，试了几个容易操作的办法，都没有好转。有次在任务管理器里重启了资源管理器，以为好了，结果还是卡死。这使我想到可能是硬盘坏了，用<a href="https://www.diskgenius.cn/download.php">DiskGenius</a>检查了硬盘，发现有个分区上有坏道，这个硬盘上的其他分区没有坏道，此时DiskGenius针对这个硬盘的操作已经很卡了。</p>
<p>我平时不关笔记本，想着重启电脑可能好转，就重启电脑，结果系统启动卡在了硬盘修复，下图所示：</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201200641.jpg"></p>
<p>修复时间太长了(ETA: estimated time frame)，想到跳过这个修复过程，直接进入系统。其实在开始修复时，会有提示“<code>跳过磁盘检查请在5秒内按任意键</code>”，但是这个按键时机很难把握，有时候按了似乎也没效果。为了进系统，试了好几次，有时候能进去，进去后这个坏道硬盘上有分区还可以使用。我关机后，又是这样漫长的尝试。</p>
<p>由于舍不得买硬盘，用DiskGenius测磁盘时不是所有分区都有坏道，所以想着要不把有坏道的分区删除，继续使用正常的分区，结果很快发现<strong>坏道扩散</strong>，又有分区在资源管理器进不去了，测试也是坏道了。</p>
<p>这时我才下决心要换硬盘。</p>
<h1 id="硬盘攻略"><a href="#硬盘攻略" class="headerlink" title="硬盘攻略"></a>硬盘攻略</h1><h2 id="CMR与SMR"><a href="#CMR与SMR" class="headerlink" title="CMR与SMR"></a>CMR与SMR</h2><p>同学告诉我现在东芝的P300很便宜，去<a href="https://www.smzdm.com/">什么值得买</a>看下介绍文章。看了社区写的文章，才知道硬盘记录技术分为CMR和SMR,CMR是以前的传统技术，SMR是新技术，可以用更小的体积获得更大的存储容量，但是SMR有缺点，在反复读写后，SMR硬盘的速度会降，所以社区都推荐买CMR盘。</p>
<p><a href="https://post.smzdm.com/p/a5k4n7kl/">机械硬盘基础知识科普+型号推荐清单</a></p>
<p><a href="https://post.smzdm.com/p/ag8lqqmw/">双十一机械硬盘选购必备清单</a></p>
<p><a href="https://post.smzdm.com/p/alp6dr0o/">看这两个网站，选到最稳的机械硬盘！附各容量推荐型号列表</a>提到<strong>HDD Platter Capacity Database</strong>网站可以查询哪些硬盘是CMR，但是这个网站不会科学上网，无法访问。</p>
<h2 id="三大厂硬盘技术"><a href="#三大厂硬盘技术" class="headerlink" title="三大厂硬盘技术"></a>三大厂硬盘技术</h2><p>希捷、东芝、西部数据等硬盘大厂最开始是不愿意告诉消费者硬盘是CMR还是SMR,后来由于用户反应硬盘降速，才开始公布自己的硬盘属于哪一种技术。</p>
<p><a href="https://www.seagate.com/cn/zh/internal-hard-drives/cmr-smr-list/">Seagate：各种硬盘采用什么技术</a></p>
<p><a href="http://toshiba-semicon-storage.com/cn/canvio/news/internal-20200428.html">关于东芝消费级存储产品中采用SMR技术的硬盘型号</a></p>
<p><a href="https://shop.westerndigital.com/zh-cn/products/internal-drives/wd-blue-mobile-sata-hdd#WD3200LPCX">WD Blue PC Mobile Hard Drive</a> 西数的其他黑盘、红盘等也可以看到哪些使用了SMR技术</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201215139.png" alt="image-20201201215139232"></p>
<h2 id="2020年硬盘CMR-SMR行情"><a href="#2020年硬盘CMR-SMR行情" class="headerlink" title="2020年硬盘CMR/SMR行情"></a>2020年硬盘CMR/SMR行情</h2><p>台式机还有很多CMR盘，笔记本CMR盘几乎没有。</p>
<p>东芝P300是3.5寸盘，虽然使用了CMR技术，但是并不能内置于笔记本，笔记本HDD一般为2.5寸。西数有CMR的2.5寸蓝盘WD5000LPCX ，容量只有500G。一圈看下来，CMR 2.5寸1T HDD几乎没有，台式机CMR盘还有许多。</p>
<p><code>**那么2020年还能买到1T 2.5寸的CMR HDD吗**？</code>抱着这个目标，我苦苦搜索，发现目前确实没有满足这样要求的新盘了，老盘倒是有，如日立HTS541010A7E630、日立 HTS721010A9E630 、希捷ST2000LM003等</p>
<p>如我笔记本原装盘就是日立 HTS721010A9E630（7K1000-1000)，7200转，缓存32M,1TB</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201220900.png" alt="image-20201201220900268" style="zoom:50%;" />

<p>我这个笔记本是2017年买的，也就意味着盘在2017年前就上市了，甚至更早，已经停产了。这种老盘京东自营已经不卖了，淘宝还能买到，但是可能不是库存盘，而是翻新盘、二手盘。</p>
<h2 id="西部数据硬盘"><a href="#西部数据硬盘" class="headerlink" title="西部数据硬盘"></a>西部数据硬盘</h2><p>查询京东，西数的盘最多，希捷第二，东芝很少，而且希捷在2.5寸HDD上已经全部用上了SMR技术（从希捷公布的信息可知）</p>
<p>日立几年前已经被西数收购了，所以也买不到日立的新盘，西数还收购了闪迪。闪迪的至尊3d SSD和西数的blue-3D SSD其实互为马甲。</p>
<p>西数的硬盘主要分为红盘、蓝盘、黑盘、紫盘、金盘等，红盘一般是用作NAS(网络附加存储)，就是备份在这个硬盘里的数据可以通过网络来访问，而不用插上数据线。蓝盘是普通家用盘，黑盘是游戏盘，金盘、紫盘是企业盘，价格高昂。</p>
<p><a href="https://shop.westerndigital.com/zh-cn/products/internal-drives/wd-black-mobile-sata-hdd#WD2500LPLX">WD_Black™ Performance Mobile Hard Drive</a></p>
<p><strong>适合笔记本的黑盘CMR/SMR型号</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201222741.png" alt="image-20201201222741761"></p>
<p><strong>普通1T蓝盘（SMR)京东价格289</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201223332.png" alt="image-20201201223332654"></p>
<p><strong>WD10JUCT(CMR)是一款监控盘，价格高昂</strong></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201223050.png" alt="image-20201201223049852"></p>
<h1 id="四种升级方案"><a href="#四种升级方案" class="headerlink" title="四种升级方案"></a>四种升级方案</h1><p>综合各种情况</p>
<ol>
<li>普通5400转WD 1T蓝盘，290元，两年质保（西数已经把蓝盘的三年质保改成了两年）</li>
<li>普通5400转WD 2T蓝盘，450元，两年质保</li>
<li>1T WD黑盘，450，五年质保</li>
<li><strong><em>三星或闪迪固态500G,450元，五年质保</em></strong></li>
</ol>
<p>最后我选择了第四种，用416买下了SanDisk 3D ultra SSD,原价459，京东开启秒杀价429，再加一个满90减10劵和银行卡支付随机优惠3元。</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201230929.png" alt="image-20201201230928872"></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201231300.png" alt="image-20201201231300069"></p>
<h1 id="固态硬盘攻略"><a href="#固态硬盘攻略" class="headerlink" title="固态硬盘攻略"></a>固态硬盘攻略</h1><p>SSD有不同的存储颗粒，品质不同，贵的SSD一般都使用了更好了存储颗粒。</p>
<p>当前主流固态硬盘，太贵的不考虑</p>
<p><a href="https://post.smzdm.com/p/ag8l5rvd/">https://post.smzdm.com/p/ag8l5rvd/</a></p>
<h2 id="固态硬盘测试软件"><a href="#固态硬盘测试软件" class="headerlink" title="固态硬盘测试软件"></a>固态硬盘测试软件</h2><p>AS SSD Benchmark 测试读写速度和4k对齐</p>
<p>CrystalDiskInfo 查看硬盘通电次数、SMRT信息、总写入量</p>
<p>DiskGenius 查看硬盘坏道以及分区</p>
<p>我的测试数据</p>
<h3 id="坏道检测"><a href="#坏道检测" class="headerlink" title="坏道检测"></a>坏道检测</h3><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201232232.jpg" alt="Sandisk坏道检测" style="zoom: 67%;" />

<h3 id="读写速度及4K对齐"><a href="#读写速度及4K对齐" class="headerlink" title="读写速度及4K对齐"></a>读写速度及4K对齐</h3><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201232308.jpg" alt="SanDisk读写速度及4K对齐检测" style="zoom: 67%;" />

<h3 id="通电次数与SMART信息"><a href="#通电次数与SMART信息" class="headerlink" title="通电次数与SMART信息"></a>通电次数与SMART信息</h3><p>由于这不是第一次测试，所以通电次数不是1，写入量也有了累计</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201201232406.jpg" alt="SanDisk通电次数以及SMART" style="zoom: 67%;" />

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1、什么值得买网上查看资料，只用百度搜得到的信息太普通</p>
<p>2、三大硬盘厂官网查看SMR与CMR型号，电商网站并没有标准磁盘的记录技术，有的还误标，客服也不知道</p>
<p>3、查询京东、天猫淘宝、苏宁、亚马逊等电商网站，尽量选择靠谱的店铺和有售后保障的，如果不怕翻车，可以试试淘宝的某些硬盘</p>
<p>4、综合比较价格，毕竟买硬盘500g的价格快接近1T了，还不如买1T，明确自己的需求</p>
<p>5、先用鲁大师查询硬件信息，知道自己笔记本的硬盘接口，避免买不兼容的接口</p>
<p>6、网上买拆机和清灰工具，自己动手拆机换硬盘。</p>
<p>2020年12月1日23:14:34</p>
]]></content>
  </entry>
  <entry>
    <title>经济知识小记</title>
    <url>/2021/02/21/%E7%BB%8F%E6%B5%8E%E7%9F%A5%E8%AF%86%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="没学过经济学如何理解经济"><a href="#没学过经济学如何理解经济" class="headerlink" title="没学过经济学如何理解经济"></a>没学过经济学如何理解经济</h2><p>经济成为一门学科，始于亚当斯密对国民财富的研究，那是还是18世纪，目前人类的经济活动比以往任何时期都多，一国的经济活动也是前所未有的。个人每天都在参与经济活动，即使如网文里的修仙大能辟谷了，也需要获取物资，交换物资。那么我如何去理解当今的经济呢？我没有经济学的专业背景，也没有时间去看经济学的专著，所以我需要一些简单的模型、理论、信息来理解经济是怎样运行的，从而用于现实世界。</p>
<p>[三十分钟看懂经济机器如何运转] <a href="https://www.bilibili.com/video/BV1kx41117mE">https://www.bilibili.com/video/BV1kx41117mE</a></p>
<p>以信贷这一经济活动来描述经济的运行，如果没有信贷，经济不可能取得如此的繁荣，但是借贷的风险也会引发经济周期</p>
<p>[货币之溯源] <a href="https://www.bilibili.com/video/BV1kx41117Zo">https://www.bilibili.com/video/BV1kx41117Zo</a></p>
<p>货币作为一种经济工具，用于服务与货物的流通，由此产生了信贷（纪录片秒速了威尼斯的犹太人作为放贷人）、债券、股票等金融市场以及中央银行，这里面有繁荣，也有骗局、泡沫和失败。关于中央银行的作用，美联储主席伯克南有书：<a href="https://www.sohu.com/a/237418889_160621">https://www.sohu.com/a/237418889_160621</a></p>
<p>[货币背后的秘密] <a href="https://www.bilibili.com/video/BV1T4411q7wy">https://www.bilibili.com/video/BV1T4411q7wy</a></p>
<p>个人会找亲戚朋友借钱，会刷信用卡，企业更是借贷大户，而政府包括中央政府和地方政府也会借债，而如果政府滥发货币，就会导致财富贬值，通货膨胀。货币曾经是金本位的，现在已经变成美元本位的了。</p>
<p>[央视纪录片《华尔街》]<a href="https://www.bilibili.com/video/BV1Ax41187Gs?from=search&amp;seid=682934249654831726">https://www.bilibili.com/video/BV1Ax41187Gs?from=search&amp;seid=682934249654831726</a></p>
<p>小平同志有论断“<em>科学技术是第一生产力</em>”，我们日常对经济繁荣的理解也是科技解放生产力、提高生产效率。本片以华尔街的历史为例，描述了资本对促进经济增长的重大作用，毫不夸张的说，二者同为第一生产力。</p>
<p>要理解经济活动，还需要跳出本国范围，了解自由贸易、贸易保护\产业保护、全球化的市场经济、比较优势</p>
<p><a href="https://www.bilibili.com/video/BV13s41187WX?from=search&seid=8992322973334456357">2017世界经济论坛马云谈“美国失业问题”</a></p>
<h2 id="时事"><a href="#时事" class="headerlink" title="时事"></a>时事</h2><p>最近发生的事有蛋壳长租公寓跑路、蚂蚁金服资本证券化的风险</p>
<h2 id="一次steam市场交易"><a href="#一次steam市场交易" class="headerlink" title="一次steam市场交易"></a>一次steam市场交易</h2><p>V社最近在dota2中推出了夜魇暗潮活动，玩家通过游戏获得积分，有几率兑换出箱子“夜魇暗潮的神圣宝藏”，玩家可以在steam市场出售。玩家即是箱子的生产者，也是箱子的消费者，也是箱子的售卖者。steam市场保障了交易的进行，抽取每次交易的费用。</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201202124648.png" alt="image-20201202124648020" style="zoom:50%;" />

<p>这个箱子最早在steam市场上售价60RMB,目前的统计曲线看不到如此高价了</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201202125001.png" alt="image-20201202125001029" style="zoom:50%;" />

<p>由此产生了两个问题：</p>
<ul>
<li>第一次标价60RMB是如何产生的？出售的玩家其实几乎可以任意标价，为什么不标50、30、80呢？</li>
</ul>
<p>任何货物都有第一次标价的时刻</p>
<ul>
<li><p>降价是如何发生的？降价就是玩家手动把标价降低，而且是玩家自发的行为，因为箱子产量越来越多</p>
<p>已经有8万多个箱子在出售了，而最开始只有几十个箱子。</p>
</li>
</ul>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201202131428.png" alt="image-20201202131428060"></p>
<p>而这不是唯一的市场，网易BUFF上也可以交易箱子，由于buff交易限制，buff上箱子开始售卖是在steam市场之后的，但是出现了一个有趣的现象，buff上的价格比steam市场上高。当时我在buff上34元出售了一个箱子，马上有玩家购买了，而此时steam市场箱子价格已经是10几RMB。</p>
<img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20201202130409.png" alt="image-20201202130409553" style="zoom:50%;" />

<ul>
<li>同样的商品，buff上售价为什么比steam市场高？我准备在buff上出售箱子时，查看了其他人的标价和最近的交易记录，虽然标价比steam高，还是有人买，所以我也标了和buff市场对齐的高价</li>
<li>玩家为什么愿意在buff上花更高的价格买箱子？</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Windows Terminal</title>
    <url>/2021/02/21/Windows%20Terminal/</url>
    <content><![CDATA[<h1 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h1><p>官方文档：<a href="https://docs.microsoft.com/zh-cn/windows/terminal/">https://docs.microsoft.com/zh-cn/windows/terminal/</a></p>
<p>Github:<a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal</a></p>
<p><a href="https://www.hanselman.com/blog/whats-the-difference-between-a-console-a-terminal-and-a-shell">终端、控制台、shell的区别</a></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置方式类型vscode，Win Terminal的默认配置文件<code>default.json</code>打开方式：按住<code>alt</code>键点击<code>设置</code>。</p>
<p>在<code>setting.json</code>中自定义选项时可以参考<code>default.json</code>。</p>
<p>对各项设定作用以及取值说明文档 <a href="https://github.com/microsoft/terminal/blob/10c599eb176a5bd460f4c5caee6bded553e38928/doc/cascadia/SettingsSchema.md">SettingsSchema.md</a></p>
<h2 id="设定启动目录"><a href="#设定启动目录" class="headerlink" title="设定启动目录"></a>设定启动目录</h2><p><code>default.json</code> 中设置为<code>&quot;startingDirectory&quot;: &quot;%USERPROFILE%&quot;</code>,如我的设置<code>powershell</code>启动目录为<code>Desktop</code></p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210212211005.png" alt="image-20210212210958074"></p>
<h2 id="设置主题（theme"><a href="#设置主题（theme" class="headerlink" title="设置主题（theme)"></a>设置主题（theme)</h2><p>主题包括整个窗口的颜色（不包括标题栏）</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210212211639.png" alt="image-20210212211639068"></p>
<p>配置Win Terminal有两种方式</p>
<p><strong>经实际使用，colortool只在cmd或powershell中有效，在Win Terminal打开的ps中运行无效</strong></p>
<p>自动方式：<a href="https://github.com/microsoft/terminal/tree/ae550e0969595f062b15c2ff5cc33d4afe8ebc3f/src/tools/ColorTool">colortool</a>, 属于Terminal repo的一部分，可以在repo下载release安装或者<code>scoop install colortool</code>,我运行整个程序就出错:</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210212212532.png" alt="image-20210212212531920"></p>
<p>查了repo的issue，暂时没找到原因，我的Terminal从win store安装，非预览版，在colortool的文档中没有见到有要求Terminal版本</p>
<p><strong>经实际使用 <code>colortool campbell.ini</code>才是正确方式，即Scheme name要带上文件后缀</strong>，<strong>为了使这项改动永久生效，还需要在powershell的标题栏右键打开属性点击“确定”</strong>，cmd的窗口主题也可以这样改变，cmd和ps的改定似乎是分开的，即使ps中已经成功运行了这条命令，这条命令在Windows Terminal中打开的PS里运行并不改变主题，猜想Windows Terminal的setting.json拥有最高优先级。</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210213201915.png" alt="image-20210213201907913"></p>
<p>手动方式：改写setting.json文件，例如配置毛玻璃主题：<a href="https://docs.microsoft.com/zh-cn/windows/terminal/custom-terminal-gallery/frosted-glass-theme%EF%BC%8C%E8%A6%81%E6%94%B9%E7%9A%84%E4%B8%A4%E5%A4%84%E4%B8%80%E5%A4%84%E6%98%AF%E5%9C%A8sheme%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%BB%E9%A2%98%E7%9A%84%E5%90%84%E7%A7%8D%E5%80%BC%EF%BC%8C%E5%8F%A6%E4%B8%80%E5%A4%84%E6%98%AFprofile%E4%B8%AD%E9%92%88%E5%AF%B9powershell%E6%B7%BB%E5%8A%A0%E9%80%89%E9%A1%B9&quot;colorScheme&quot;,%60default.json%60%E6%9C%89%E5%90%84%E7%A7%8D%E4%B8%BB%E9%A2%98%E7%9A%84scheme%E9%94%AE%E5%80%BC%E5%AF%B9%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E4%B8%BB%E9%A2%98%E6%98%AFCampbell%EF%BC%8C%E4%BB%A5%E4%B8%8A%E6%88%AA%E5%9B%BE%E6%98%AF%E6%94%B9%E6%88%90%E4%BA%86%60Solarized">https://docs.microsoft.com/zh-cn/windows/terminal/custom-terminal-gallery/frosted-glass-theme，要改的两处一处是在sheme中添加主题的各种值，另一处是profile中针对powershell添加选项&quot;colorScheme&quot;,`default.json`有各种主题的scheme键值对，默认的主题是Campbell，以上截图是改成了`Solarized</a> Dark`，可以观察到colortool -b Campbell命令中的字符-b不易阅读。</p>
<h2 id="使用oh-my-posh美化Powershell"><a href="#使用oh-my-posh美化Powershell" class="headerlink" title="使用oh-my-posh美化Powershell"></a>使用oh-my-posh美化Powershell</h2><p><a href="https://github.com/JanDeDobbeleer/oh-my-posh">https://github.com/JanDeDobbeleer/oh-my-posh</a></p>
<p>oh-my-posh包括了powerline功能，后者可以在命令行提示中显示git状态以及给提示分段，以下乱码是字体不能显示某些符号</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210212214545.png" alt="image-20210212214544956"></p>
<p>参见issue <a href="https://github.com/JanDeDobbeleer/oh-my-posh/issues/319">#319</a>,下载任何一个Nerd字体,安装字体后，setting.json中添加”fontFace”: “Delugia Nerd Font”,  这个字体的下载地址参见：<a href="https://www.jianshu.com/p/19db2f50cec9">https://www.jianshu.com/p/19db2f50cec9</a></p>
<p>Nerd字体的Repo:<a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a></p>
<p>以下是美化后的效果截图</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210212220023.png" alt="image-20210212220023248"></p>
<p>1部分：显示加载配置文件耗时</p>
<p>2部分：用vscode在oh-my-posh本地repository下创建了新文件</p>
<p>3部分：git状态提示，+1表示新添加了文件</p>
<h3 id="不能在powershell中修改字体"><a href="#不能在powershell中修改字体" class="headerlink" title="不能在powershell中修改字体"></a>不能在powershell中修改字体</h3><p> 在windows Terminal setting.json中给PS配置了NERD字体，如果不通过WT直接启动PS，还是不能正确显示，PS也无法更改字体，原因是PS对字体使用有更严格的要求</p>
<p>可以使用这个字体：<a href="https://github.com/be5invis/Sarasa-Gothic/releases">https://github.com/be5invis/Sarasa-Gothic/releases</a> 在它的介绍里发现有<a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/be5invis/Sarasa-Gothic">tsinghua mirror</a>,加快下载速度</p>
<p>使用<code>等距更纱黑体 T SC</code>字体可以显示powerline的符号，这个字体也适合cmd，即cmd也能设置这个字体，再配合colortool更改配色</p>
<p>参考<a href="https://www.jianshu.com/p/100aa26a42cc">https://www.jianshu.com/p/100aa26a42cc</a></p>
<h2 id="添加git-bash到Win-Terminal"><a href="#添加git-bash到Win-Terminal" class="headerlink" title="添加git bash到Win Terminal"></a>添加git bash到Win Terminal</h2><p>git bash属于git-for-windows提供的bash环境</p>
<p>每个profile都需要GUID，一个在线生成GUID的网站<a href="https://www.guidgen.com/">https://www.guidgen.com/</a></p>
<p>or You can run <code>[guid]::NewGuid()</code> in PowerShell to generate a GUID for your custom profile.</p>
<p>我的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">               &#x2F;&#x2F; Make changes here to the git-bash.exe profile.</span><br><span class="line">               &quot;guid&quot;: &quot;&#123;b113edb3-02a0-431a-a6c9-9c0356a1ad4c&#125;&quot;,</span><br><span class="line">               &quot;name&quot;: &quot;git bash&quot;,</span><br><span class="line">               &quot;commandline&quot;: &quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;,</span><br><span class="line">               &quot;icon&quot;: &quot;C:\\Program Files\\Git\\mingw64\\share\\git\\git-for-windows.ico&quot;,</span><br><span class="line">               &quot;hidden&quot;: false,</span><br><span class="line">               &quot;padding&quot;: &quot;8, 8, 8, 8&quot;,</span><br><span class="line">               &quot;altGrAliasing&quot;: true,</span><br><span class="line">               &quot;startingDirectory&quot;: &quot;%USERPROFILE%&quot;,</span><br><span class="line">               &quot;useAcrylic&quot;: true,</span><br><span class="line">               &quot;acrylicOpacity&quot;: 0.7,</span><br><span class="line">               &quot;colorScheme&quot;: &quot;Ubuntu&quot;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>注意 commandline不要填git-bash.exe的路径，否则生成的窗口不会嵌入在Win Terminal里，而是独立成窗口</p>
<p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210213214337.png" alt="image-20210213214337473"></p>
<p><strong>issue</strong></p>
<p>1部分可以看到有路径没有正确显示，中文乱码</p>
<p><a href="https://github.com/git-for-windows/git/issues/2181T">https://github.com/git-for-windows/git/issues/2181T</a></p>
<h2 id="修改启动时的默认profile"><a href="#修改启动时的默认profile" class="headerlink" title="修改启动时的默认profile"></a>修改启动时的默认profile</h2><p>defaultProfile 值填写各个profile的GUID,如要默认启动bash，就填bash的GUID</p>
<h2 id="修改背景图片"><a href="#修改背景图片" class="headerlink" title="修改背景图片"></a>修改背景图片</h2><p>“backgroundImage”：”图片的绝对地址”</p>
<p>“backgroundImageOpacity”: 1 // 图片透明图</p>
<p>“backgroundImageStretchMode”: “uniformToFill”</p>
<p>setting.json的”defaults”下的设置对所有profile都有效，Put settings here that you want to apply to all profiles。如果把更改背景图片的设置放在这儿，所有的shell都会被更改背景图片</p>
<h2 id="一个Powershell资源收集REPO"><a href="#一个Powershell资源收集REPO" class="headerlink" title="一个Powershell资源收集REPO"></a>一个Powershell资源收集REPO</h2><p><a href="https://github.com/janikvonrotz/awesome-powershell">awesome-powershell</a></p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://github.com/atomcorp/themes">https://github.com/atomcorp/themes</a> 此处可以获取各种theme的json文件</p>
<p><a href="https://terminalsplash.com/">TerminalSplash</a></p>
<h1 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h1><p><img src="https://gitee.com/lensousou/imagerepo/raw/master/img//20210214033957.png" alt="image-20210214033950182"></p>
<h2 id="更改安装目录"><a href="#更改安装目录" class="headerlink" title="更改安装目录"></a>更改安装目录</h2><p>默认安装目录为系统盘，依以下步骤可以迁移到其他目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">首先查看所有分发版本</span><br><span class="line">wsl <span class="literal">-l</span> -<span class="literal">-all</span>  <span class="literal">-v</span></span><br><span class="line">  NAME STATE VERSION</span><br><span class="line"> * Ubuntu<span class="literal">-20</span>.<span class="number">04</span> Running <span class="number">2</span></span><br><span class="line"></span><br><span class="line">导出分发版为tar文件到d盘</span><br><span class="line">wsl -<span class="literal">-export</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> d:\ubuntu20.<span class="number">04</span>.tar</span><br><span class="line">注销当前分发版</span><br><span class="line">wsl -<span class="literal">-unregister</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span></span><br><span class="line">重新导入并安装分发版在d:\ubuntu</span><br><span class="line">wsl -<span class="literal">-import</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> d:\ubuntu d:\ubuntu20.<span class="number">04</span>.tar -<span class="literal">-version</span> <span class="number">2</span></span><br><span class="line">设置默认登陆用户为安装时用户名</span><br><span class="line">ubuntu2004 config -<span class="literal">-default</span><span class="literal">-user</span> Username</span><br><span class="line">删除tar文件(可选)</span><br><span class="line"><span class="built_in">del</span> d:\ubuntu20.<span class="number">04</span>.tar</span><br></pre></td></tr></table></figure>



<h2 id="运行windows的exe文件"><a href="#运行windows的exe文件" class="headerlink" title="运行windows的exe文件"></a>运行windows的exe文件</h2><p>wsl（指子系统的命令行）自动继承了windows的环境变量，输入<code>echo $PATH</code> 可以观察，但是/mnt/c/MinGW/bin下的gcc为exe文件，需要输入gcc.exe才能在wsl里运行</p>
<h2 id="打开资源管理器"><a href="#打开资源管理器" class="headerlink" title="打开资源管理器"></a>打开资源管理器</h2><p>运行explorer.exe .可以打开当前目录，可以在.bahsrc里建立同名：alias explore=explorer.exe</p>
<h2 id="在windows和wsl上都安装有python"><a href="#在windows和wsl上都安装有python" class="headerlink" title="在windows和wsl上都安装有python"></a>在windows和wsl上都安装有python</h2><p>Remember, Python is installed in the Linux distro, which means if you’re editing Python files on the Windows side, you can’t run or debug them unless you install the same Python development stack on Windows. And that defeats the purpose of having an isolated Linux instance set up with all your Python tools and runtimes!</p>
<h2 id="vscode-wsl"><a href="#vscode-wsl" class="headerlink" title="vscode+wsl"></a>vscode+wsl</h2><p>vscode装在windows侧，配有插件wsl-remote,第一次在wsl中使用命令code会自动安装a small vscode server</p>
<p><a href="https://code.visualstudio.com/docs/remote/wsl">https://code.visualstudio.com/docs/remote/wsl</a></p>
<h2 id="wsl在vscode中的issue"><a href="#wsl在vscode中的issue" class="headerlink" title="wsl在vscode中的issue"></a>wsl在vscode中的issue</h2><p><a href="https://code.visualstudio.com/docs/remote/wsl#_known-limitations">https://code.visualstudio.com/docs/remote/wsl#_known-limitations</a></p>
<h2 id="Working-with-Git"><a href="#Working-with-Git" class="headerlink" title="Working with Git#"></a>Working with Git<a href="https://code.visualstudio.com/docs/remote/wsl#_working-with-git">#</a></h2><p>wsl和vsc以及git一起工作，有两个问题，一是换行，二是凭证</p>
<h1 id="Using-C-and-WSL-in-VS-Code"><a href="#Using-C-and-WSL-in-VS-Code" class="headerlink" title="Using C++ and WSL in VS Code"></a>Using C++ and WSL in VS Code</h1><p><a href="https://code.visualstudio.com/docs/cpp/config-wsl">https://code.visualstudio.com/docs/cpp/config-wsl</a> GCC</p>
<h1 id="ZSH"><a href="#ZSH" class="headerlink" title="ZSH"></a>ZSH</h1><p>安装zsh并设置为默认的shell</p>
<p><code>echo $SHELL</code> 查看默认的shell</p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH</a></p>
<h1 id="Fish"><a href="#Fish" class="headerlink" title="Fish"></a>Fish</h1><p>相比zsh,开箱就用，运行fish_config还可以开启浏览器端的配置</p>
<p>输入help keyword，可以访问在线的fish帮助</p>
<p>安装<a href="https://github.com/oh-my-fish">oh-my-fish</a>,如果要安装插件也可以在这个仓库找到</p>
<p>fish的awesome repo:<a href="https://github.com/jorgebucaran/awsm.fish,%E6%94%B6%E9%9B%86%E4%BA%86fish%E7%9A%84%E8%AE%B8%E5%A4%9A%E8%B5%84%E6%BA%90">https://github.com/jorgebucaran/awsm.fish,收集了fish的许多资源</a></p>
<p>fish不兼容bash,如果要运行bash脚本怎么办呢？</p>
<h2 id="目录跳转插件"><a href="#目录跳转插件" class="headerlink" title="目录跳转插件"></a>目录跳转插件</h2><p><a href="https://github.com/oh-my-fish">oh-my-fish</a>/<strong><a href="https://github.com/oh-my-fish/plugin-z">plugin-z</a></strong></p>
<p><a href="https://github.com/wting">wting</a>/<strong><a href="https://github.com/wting/autojump">autojump</a></strong></p>
<p><a href="https://github.com/rupa">rupa</a>/<strong><a href="https://github.com/rupa/z">z</a></strong></p>
<p><a href="https://github.com/skywind3000">skywind3000</a>/<strong><a href="https://github.com/skywind3000/z.lua">z.lua</a></strong></p>
<h2 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h2><p>bash:</p>
<p><a href="https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh">https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh</a></p>
<h2 id="error-starting-the-fish-config-web-ui-in-wsl"><a href="#error-starting-the-fish-config-web-ui-in-wsl" class="headerlink" title="error-starting-the-fish-config-web-ui-in-wsl"></a>error-starting-the-fish-config-web-ui-in-wsl</h2><p>在我wsl上输入fish_config,不能访问web config网页，错误如视频所示：</p>
<p><a href="https://github.com/huangchaof/huangchaof.github.io/blob/master/fish_configerror.mp4">https://github.com/huangchaof/huangchaof.github.io/blob/master/fish_configerror.mp4</a></p>
<p>或者链接：<a href="https://pan.baidu.com/s/1fSvi-uLUnEXHHyIc6vXRyg">https://pan.baidu.com/s/1fSvi-uLUnEXHHyIc6vXRyg</a><br>提取码：s1w3 </p>
<p>解决方式：<a href="https://unix.stackexchange.com/questions/597118/error-starting-the-fish-config-web-ui-in-wsl">https://unix.stackexchange.com/questions/597118/error-starting-the-fish-config-web-ui-in-wsl</a></p>
<p>这个web页是通过web server实现的，源文件在/usr/share/fish/tools/web_config/webconfig.py</p>
<h1 id="Notepad2"><a href="#Notepad2" class="headerlink" title="Notepad2"></a><a href="https://www.flos-freeware.ch/notepad2.html">Notepad2</a></h1><p>原始的已经停止更新，现在有一个github分支<a href="https://github.com/zufuliu/notepad2">https://github.com/zufuliu/notepad2</a></p>
<h1 id="mcedit"><a href="#mcedit" class="headerlink" title="mcedit"></a>mcedit</h1><p>shortcut说明</p>
<p>c-u 表示ctrl-U</p>
<p>m-e 表示alt-e</p>
<p>s-i表示shift-insert</p>
]]></content>
      <categories>
        <category>CLI</category>
      </categories>
      <tags>
        <tag>CLI</tag>
      </tags>
  </entry>
</search>
